#!/bin/bash

################################################################################
# Clears dotfiles backups only upto DOTFILES_BACKUP_LIMIT. Clears all when
# DOTFILES_BACKUP_LIMIT is 0 or no arguments was given.
#
# The $DOTFILESRC specifies the location of .dotfilesrc file to override default
# script variables.
#
################################# DEPENDENCIES #################################
#
# ../../scripting-utils/colors  Pre-defined global variables for colorful string
#                               outputs.
# ../../scripting-utils/utils   Utility functions for detailed debugging
#                               outputs.
#
########################### Script Global Variables ############################
#
# DOTFILES_BACKUP_LIMIT = Auto clean backup limit
# DOTFILES_BACKUP_DIR   = Specifies the location of backup files.  directory to
#                         backup.
# LOG_FILE_DIR          = Log file directory.
# LOG_FILE              = Log file name. Only logs on `-d` flag or debug mode.
#                         Defaults to current timestamp.
#
################################################################################
# Author : Mark Lucernas <https://github.com/marklcrns>
# Date   : 2020-08-11
################################################################################





################################################## CONSTANT GLOBAL VARIABLES ###

DOTFILES_BACKUP_LIMIT=10
DOTFILES_BACKUP_DIR="${HOME}/.dotfiles.bak"
LOG_FILE_DIR="${HOME}/log"
LOG_FILE="$(date +"%Y-%m-%dT%H:%M:%S")_$(basename -- $0).log"

SCRIPTPATH="$(realpath -s $0)"
SCRIPTDIR=$(dirname ${SCRIPTPATH})

############################################## EXTERNAL DEPENDENCIES SCRIPTS ###

# Ansi color code variables
if [[ -e "${SCRIPTDIR}/../../scripting-utils/colors" ]]; then
  source "${SCRIPTDIR}/../../scripting-utils/colors"
else
  echo "${SCRIPTPATH} WARNING: Failed to source '../../scripting-utils/colors' dependency"
  echo
fi
# Utility functions
if [[ -e "${SCRIPTDIR}/../../scripting-utils/utils" ]]; then
  source "${SCRIPTDIR}/../../scripting-utils/utils"
else
  echo "${SCRIPTPATH} ERROR: Failed to source '../../scripting-utils/utils' dependency"
  exit 1
fi

# Source rc file if exist
[[ -e "${DOTFILESRC}" ]] && source "${DOTFILESRC}"

############################################################### FLAG OPTIONS ###

# Display help
usage() {
  cat << EOF
USAGE:

Clears dotfiles backups only up to DOTFILES_BACKUP_LIMIT. Clears all when
DOTFILES_BACKUP_LIMIT is 0 or no arguments was given.

  dotclearbak
  dotclearbak [ -DqvVy ] [ -r dotfilesrc-path ]
  dotclearbak [ backup-limit ] [ dotfiles-backup-dir ]

OPTIONS:

  -D  debug mode (redirect output in log file)
  -q  quite output
  -r  specify dotfilesrc path
  -v  verbose output
  -V  very verbose output
  -y  skip confirmation
  -h  help

EOF
}

# Set flag options
while getopts "DsvVyh" opt; do
  case "$opt" in
    D) [[ -n "$DEBUG"           ]] && unset DEBUG                      || DEBUG=true;;
    q) [[ -n "$IS_QUITE"        ]] && unset IS_QUITE                   || IS_QUITE=true;;
    v) [[ -n "$IS_VERBOSE"      ]] && unset IS_VERBOSE                 || IS_VERBOSE=true;;
    V) [[ -n "$IS_VERY_VERBOSE" ]] && unset IS_VERBOSE IS_VERY_VERBOSE || IS_VERBOSE=true; IS_VERY_VERBOSE=true;;
    y) [[ -n "$SKIP_CONFIRM"    ]] && unset SKIP_CONFIRM               || SKIP_CONFIRM=true;;
    h) usage && exit 0;;
    *) usage && echo -e "${SCRIPTPATH}:\n${RED}ERROR: Invalid flag.${NC}"
      exit 1
  esac
done 2>/dev/null
shift "$((OPTIND-1))" # explanation https://unix.stackexchange.com/a/214151

####################################################### PRE-EXECUTION SET UP ###

# Strip trailing '/' in DIR path variables
DOTFILES_BACKUP_DIR=$(echo ${DOTFILES_BACKUP_DIR} | sed 's,/*$,,')
LOG_FILE_DIR=$(echo ${LOG_FILE_DIR} | sed 's,/*$,,')

# Log stdout and stderr to $LOG_FILE in $LOG_FILE_DIR
if [[ -n "${DEBUG}" ]]; then
  # Append LOG_FILE
  LOG_FILE_PATH="${LOG_FILE_DIR}/${LOG_FILE}"
  # Create log directory if not existing
  if [[ ! -d "${LOG_FILE_DIR}" ]]; then
    mkdir -p "${LOG_FILE_DIR}"
  fi
  # Initialize log file
  echo -e "${SCRIPTPATH} log outputs\n" > ${LOG_FILE_PATH}
fi

################################################## SCRIPT ARGUMENTS HANDLING ###

# Overwrite default limit if given
if [[ -n $1 ]]; then
  tmp_dotfiles_backup_limit=$1
  if [[ ${tmp_dotfiles_backup_limit} -ge 0 ]]; then
    DOTFILES_BACKUP_LIMIT=${tmp_dotfiles_backup_limit}
  else
    error "Invalid dotfiles backup limit" 1
  fi
fi

# Validate dotfiles backup directory argument
if [[ -n $2 ]]; then
  tmp_dotfiles_backup_dir="$2"
  if [[ -d "${tmp_dotfiles_backup_dir}" ]]; then
    DOTFILES_BACKUP_DIR="${tmp_dotfiles_backup_dir}"
    # Strip trailing '/' in DIR path variables
    DOTFILES_BACKUP_DIR=$(echo ${DOTFILES_BACKUP_DIR} | sed 's,/*$,,')
  else
    error "Invalid dotfiles backup directory path '${DOTFILES_BACKUP_DIR}'" 1
  fi
fi

if [[ -n "${HAS_RC_FILE}" ]]; then
  if [[ -e "${tmp_rc_file_path}" ]]; then
    source "${tmp_rc_file_path}"
  else
    error "Invalid rc file path '${tmp_rc_file_path}'" 1
  fi
fi

########################################################## SCRIPT EXECUTIONS ###

echolog
echolog "Detecting all backup files..."
echolog
echolog "$(ls "${DOTFILES_BACKUP_DIR}")"

# Assess backups to be be removed
backup_dir_count=$(ls "${DOTFILES_BACKUP_DIR}" | wc -l)
to_remove_count=$(( ${backup_dir_count} - ${DOTFILES_BACKUP_LIMIT} ))

# Cache backup directories to be removed
if [[ ${to_remove_count} -lt 0 ]]; then
  to_remove_count=${backup_dir_count}
fi

echolog
echolog "Total backups: \t\t\t${backup_dir_count}"
warning "Oldest backups to remove: \t${to_remove_count}"
echolog "Backup limit: \t\t\t${DOTFILES_BACKUP_LIMIT}"
echolog

if [[ ${to_remove_count} -eq 0 ]]; then # Abort if nothing to delete
  abort "Nothing to delete. Skipping..."
elif [[ ${backup_dir_count} -lt ${DOTFILES_BACKUP_LIMIT} ]]; then # Abort if still below limit
  abort "Backups still below limit. Skipping deletion..."
fi

# Confirmation
if [[ -z "${SKIP_CONFIRM}" ]]; then
  log "Do you wish to continue? (Y/y): \n" 1
  ${SCRIPTDIR}/../../scripting-utils/confirm "Do you wish to continue? (Y/y): "
  if [[ "${?}" -eq 1 ]]; then
    abort "Update aborted."
  elif [[ "${?}" -eq 2 ]]; then
    error "Unsupported shell"
  fi
fi

echolog "Removing excess backups..."
echolog

# Get oldest backups amount based on DOTFILES_BACKUP_LIMIT
to_remove_list="$(ls -1 ${DOTFILES_BACKUP_DIR} | head -${to_remove_count})"
removed_count=0

# Execute backups removal
while IFS= read -r backup_file; do
  if execlog "rm -rf '${DOTFILES_BACKUP_DIR}/${backup_file}'" 1; then
    warning "${DOTFILES_BACKUP_DIR}/${backup_file} deleted"
    # Increment removed count
    removed_count=$((removed_count+1))
  else
    error "Failed to remove ${DOTFILES_BACKUP_DIR}/${backup_file}"
  fi
done <<< "${to_remove_list}"

#################################################################### WRAP UP ###

# Final check
new_backup_dir_count=$(ls "${DOTFILES_BACKUP_DIR}" | wc -l)
# Check if all backups due for deletion are deleted
if [[ $(( ${new_backup_dir_count} + ${removed_count} )) -eq ${backup_dir_count} ]]; then
  echolog
  ok "Total removed: ${removed_count}"
else
  error "Clearing dotfiles backups failed" 2
fi

# Clean log files
if [[ -n "${IS_VERY_VERBOSE}" ]]; then
  [[ -n "${DEBUG}" ]] && cleanlog 1000
else
  [[ -n "${DEBUG}" ]] && cleanlog 1000 1
fi

finish "Dotfiles backups cleared!"

