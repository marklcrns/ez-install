#!/bin/bash

################################################################################
# Detection functions for detecting changes or deletion between files or
# directories.
#
# WARNING: This is not an executable script. This script is meant to be used as
# a utility by sourcing this script for efficient bash script writing.
#
################################# Functions ###################################
#
# detect_change()     = Compare two files or directory (recursively) for file
#                        changes with `cmp` byte by byte and return a passed in
#                        `__changes_list` string, appending `__source` path if
#                        changes has been detected.
# detect_delete()     = Compare two files or directory (recursively ) for file
#                       deletions with `cmp` and return a passed in
#                       `__deletion_list` string, appending `__source` path if
#                       `__target` path does not exist.
#
################################# DEPENDENCIES #################################
#
# ../../scripting-utils/colors  Pre-defined global variables for colorful string
#                               outputs.
# ../../scripting-utils/utils   Utility functions for detailed debugging
#                               outputs.
#
########################### Script Global Variables ############################
#
# NO_DELETE  = Skip file deletion for detect_delete() and prevent from
#              incrementing `__deletion_count`.
#
################################################################################
# Author : Mark Lucernas <https://github.com/marklcrns>
# Date   : 2020-08-14
################################################################################





# Prevent from being executed directly in the terminal
if [ ${0##*/} == ${BASH_SOURCE[0]##*/} ]; then
  echo "WARNING:"
  echo "$(realpath -s $0) is not meant to be executed directly!"
  echo "Use this script only by sourcing it."
  echo
  exit 1
fi

# Check if an element is in array
# $1 = element to check
# $2 = array
array_has_element() {
  local arr match="$1"
  shift
  for arr; do [[ "$arr" == "$match" ]] && return 0; done
  return 1
}

# TODO: Make bidirectional
#       Make diffing changes detect the most recent file
#       Solution: Caching
#
# Compares two file path (would compare recursively if files are directories)
# and returns all files with discrepancies.
# Require at least 3 arguments or args $1, $2, and $3 to execute.
#
# ARGS:
# $1 = Source file path
# $2 = Target file path
# $3 = List of detected changes, including source and target file path separated
#      by ';', and delimited by '\n'.
# $4 = Detected changes count
# $5 = Total files compared
# $6 = Pass in integer '1' to turn on IS_QUITE
#
# Returns $3, $4, $5 variable args with new values from execution.
detect_change() {
  local __source=$1
  local __target=$2
  local __changes_list=$3
  local __changes_count=$4
  local __total_files_count=$5
  local silent=$6

  # Check args count
  if [[ $# -lt 3 ]]; then
    echolog "${RED}${FUNCNAME[0]}: Invalid number of arguments${NC}"
    return 1
  fi

  # Exit if invalid path
  if [[ ! -e "${__source}" ]]; then
    error "${SCRIPTPATH} ${FUNCNAME[0]}: Invalid source path '${__source}'"
    return 2
  fi

  local __tmp_changes_list
  local __tmp_changes_count
  local __tmp_total_files_count

  # Strip all trailing backslashes '/'
  __source=$(echo "${__source}" | sed 's,/*$,,')
  __target=$(echo "${__target}" | sed 's,/*$,,')

  if [[ -d "${__source}" ]]; then # Directory dotfile
    # Recursively compare
    while IFS= read -r -d '' __source_file; do
      # Strip all trailing backslashes '/'
      __source_file=$(echo "${__source_file}" | sed 's,/*$,,')
      # Get relative path to append to target
      __rel_path_file=$(echo "${__source_file}" | sed "s,${__source}/,,")
      __target_file="${__target}/${__rel_path_file}"

      # Ignore if in DOTFILES_IGNORE_LIST
      if array_has_element "${__source_file}" "${DOTFILES_IGNORE_LIST[@]}"; then
        printf "${FG_LT_BLACK}Changes ignored ${__source_file}${ANSI_OFF}\n"
        continue
      fi
      if array_has_element "${__target_file}" "${DOTFILES_IGNORE_LIST[@]}"; then
        printf "${FG_LT_BLACK}Changes ignored ${__target_file}${ANSI_OFF}\n"
        continue
      fi

      # Compare dotfiles in target dir with local copy in source dir
      if cmp "${__source_file}" "${__target_file}" &> /dev/null; then
        if [[ ${silent} -ne 1 ]]; then
          echolog "No changes detected in ${__source_file}"
        else
          log "No changes detected in ${__source_file}"
        fi
      else
        if [[ -e "${__target_file}" ]]; then
          echolog "${YELLOW}Changes detected:${NC}" ${silent}
          echolog "${BLUE}SOURCE ${__source_file}${NC}" ${silent}
          echolog "${BLUE}TARGET ${__target_file}${NC}" ${silent}
        else
          echolog "${YELLOW}Missing file:${NC}" ${silent}
          echolog "${BLUE}SOURCE ${__source_file}${NC}" ${silent}
          echolog "${RED}TARGET ${__target_file}${NC}" ${silent}
        fi
        # Record changes
        __tmp_changes_count=$(expr ${__tmp_changes_count} + 1)
        if [[ -z "${__tmp_changes_list}" ]]; then
          __tmp_changes_list="${__source_file};${__target_file}"
        else
          __tmp_changes_list="${__tmp_changes_list}\n${__source_file};${__target_file}"
        fi
      fi
      # Increment total files compared
      __tmp_total_files_count=$(expr ${__tmp_total_files_count} + 1)
    done < <(find "${__source}" -not -path "*/.git/*" -type f -print0) # Process substitution for outside variables
  else # Non-directory dotfile
    # Compare dotfiles in target dir with local copy in source dir
    if cmp -s "${__source}" "${__target}" &> /dev/null; then
      if [[ ${silent} -ne 1 ]]; then
        echolog "No changes detected in ${__source}"
      else
        log "No changes detected in ${__source}"
      fi
    else
      if [[ -e "${__target}" ]]; then
        echolog "${YELLOW}Changes detected:${NC}" ${silent}
        echolog "${BLUE}SOURCE ${__source}${NC}" ${silent}
        echolog "${BLUE}TARGET ${__target}${NC}" ${silent}
      else
        echolog "${YELLOW}Missing file:${NC}" ${silent}
        echolog "${BLUE}SOURCE ${__source}${NC}" ${silent}
        echolog "${RED}TARGET ${__target}${NC}" ${silent}
      fi
      # Record changes
      __tmp_changes_count=$(expr ${__tmp_changes_count} + 1)
      if [[ -z "${__tmp_changes_list}" ]]; then
        __tmp_changes_list="${__source};${__target}"
      else
        __tmp_changes_list="${__tmp_changes_list}\n${__source};${__target}"
      fi
    fi
    # Increment total files compared
    __tmp_total_files_count=$(expr ${__tmp_total_files_count} + 1)
  fi
  # Return variables
  [[ -n "${__changes_list}" ]]      && eval $__changes_list="'$__tmp_changes_list'"
  [[ -n "${__changes_count}" ]]     && eval $__changes_count=$__tmp_changes_count
  [[ -n "${__total_files_count}" ]] && eval $__total_files_count=$__tmp_total_files_count
}


# Compares two file path (would compare recursively if files are directories)
# and returns all files that does not exists in the target file or directory.
# Require at least 3 arguments or args $1, $2, and $3 to execute.
#
# ARGS:
# $1 = Source file path
# $2 = Target file path
# $3 = List of source files that does not exist in the target file path.
# $4 = Detected changes count
# $5 = Total files compared
# $6 = Pass in integer '1' to turn on IS_QUITE
#
# Returns $3, $4, $5 variable args with new values from execution.
detect_delete() {
  local __source=$1
  local __target=$2
  local __deletion_list=$3
  local __deletion_count=$4
  local __total_files_count=$5
  local silent=$6

  # Check args count
  if [[ $# -lt 3 ]]; then
    echolog "${RED}${FUNCNAME[0]}: Invalid number of arguments${NC}"
    return 1
  fi

  local __tmp_deletion_list
  local __tmp_deletion_count
  local __tmp_total_files_count

  # Strip all trailing backslashes '/'
  __source=$(echo "${__source}" | sed 's,/*$,,')
  __target=$(echo "${__target}" | sed 's,/*$,,')

  if [[ -d "${__source}" ]]; then # Directory dotfile
    # Recursively compare
    while IFS= read -r -d '' __source_file; do
      # Strip all trailing backslashes '/'
      __source_file=$(echo "${__source_file}" | sed 's,/*$,,')
      # Get relative path to append to target
      __rel_path_file=$(echo "${__source_file}" | sed "s,${__source}/,,")
      __target_file="${__target}/${__rel_path_file}"

      # Ignore if in DOTFILES_IGNORE_LIST
      if array_has_element "${__source_file}" "${DOTFILES_IGNORE_LIST[@]}"; then
        printf "${FG_LT_BLACK}Deletion ignored ${__source_file}${ANSI_OFF}\n"
        continue
      fi
      if array_has_element "${__target_file}" "${DOTFILES_IGNORE_LIST[@]}"; then
        printf "${FG_LT_BLACK}Deletion ignored ${__target_file}${ANSI_OFF}\n"
        continue
      fi

      # Check deleted files
      if [[ ! -e "${__target_file}" ]]; then
        # Record deletion if not NO_DELETE
        if [[ -z "${NO_DELETE}" ]]; then
          echolog "${RED}File to be deleted ${__source_file}${NC}" ${silent}
          __tmp_deletion_count=$(expr ${__tmp_deletion_count} + 1)
        else
          echolog "${RED}File to be deleted ${__source_file} ${YELLOW}SKIPPED${NC}" ${silent}
        fi
        # Append to changes list
        if [[ -z ${__tmp_deletion_list} ]]; then
          __tmp_deletion_list="${__source_file}"
        else
          __tmp_deletion_list="${__tmp_deletion_list}\n${__source_file}"
        fi
      fi
      # Increment total files compared
      __tmp_total_files_count=$(expr ${__tmp_total_files_count} + 1)
    done < <(find "${__source}" -not -path "*/.git/*" -type f -print0) # Process substitution for outside variables
  else # Non-directory dotfile
    # Check deleted files
    if [[ ! -e "${__target}" ]]; then
      echolog "${RED}File does not exist ${__source}${NC}" ${silent}
      # Record changes
      __tmp_deletion_count=$(expr ${__tmp_deletion_count} + 1)
      if [[ -z ${__tmp_deletion_list} ]]; then
        __tmp_deletion_list="${__source}"
      else
        __tmp_deletion_list="${__tmp_deletion_list}\n${__source}"
      fi
    fi
    # Increment total files compared
    __tmp_total_files_count=$(expr ${__tmp_total_files_count} + 1)
  fi
  # Return variables
  [[ -n "${__deletion_list}" ]]     && eval $__deletion_list="'$__tmp_deletion_list'"
  [[ -n "${__deletion_count}" ]]    && eval $__deletion_count=$__tmp_deletion_count
  [[ -n "${__total_files_count}" ]] && eval $__total_files_count=$__tmp_total_files_count
}

