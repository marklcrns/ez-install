#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "$(dirname -- $(realpath -- "${BASH_SOURCE[0]}"))/.ez-installrc"
source "${EZ_INSTALL_HOME}/common/include.sh"

###################################################### EXTERNAL DEPENDENCIES ###

include "${EZ_INSTALL_HOME}/common/common.sh"
include "${EZ_INSTALL_HOME}/common/array.sh"
include "${EZ_INSTALL_HOME}/common/sys.sh"
include "${EZ_INSTALL_HOME}/install/const.sh"
include "${EZ_INSTALL_HOME}/install/utils/actions.sh"
include "${EZ_INSTALL_HOME}/install/utils/pac-logger.sh"
include "${EZ_INSTALL_HOME}/install/utils/pac-transform.sh"
include "${EZ_INSTALL_HOME}/install/pac-install.sh"
include "${EZ_INSTALL_HOME}/install/install.sh"
include "${EZ_INSTALL_HOME}/install/common.sh"
include "${EZ_INSTALL_HOME}/generate/generate.sh"

################################################## CONSTANT GLOBAL VARIABLES ###

readonly EZ_VERSION="0.3 BETA"
readonly SCRIPT_ARGS="${@}"

############################################################### FLAG OPTIONS ###


function usage() {
  cat << EOF
${SCRIPT_NAME}

  Universal BASH package installer purely written in bash scripts.


USAGE:

  $(basename -- ${SCRIPT_PATH}) [-h] [-V] [-jvxyRS] [-o destination] [-p package-dir] package1 package2 ...


OPTIONS:

  --package-dir   -D    Directory to search packages from.
                        Global default=$PACKAGE_ROOT_DIR.
                        Local default=$LOCAL_PACKAGE_ROOT_DIR.
  --generate      -g    Generate package(s) locally instead.
  --json          -j    Parse package data as json.
  --destination   -o    Package output directory (for curl, wget, etc.).
                        default=$HOME/Downloads.
  --no-norecurse  -R    Prevent recursive package dependency installation.
  --as-root       -S    Run package manager as root (sudo).

  --quiet         -q    Suppress standard output. LOG_DEBUG_LEVEL=3.
  --debug         -x    Debug mode (print all log levels). LOG_DEBUG_LEVEL=7.
  --skip-confirm  -y    Skip confirmation.
  --help          -h    Print usage.
  --version       -V    Print ez version.


EXIT CODES:

  Ez Special Exit Codes

  BASH_EZ_EX__BASE            ${BASH_EZ_EX__BASE}    Ez special exit codes start.
  BASH_EZ_EX_PAC_NOTFOUND     ${BASH_EZ_EX_PAC_NOTFOUND}    Package not found.
  BASH_EZ_EX_PACMAN_NOTFOUND  ${BASH_EZ_EX_PACMAN_NOTFOUND}    Package manager not supported.
  BASH_EZ_EX_DEP_NOTFOUND     ${BASH_EZ_EX_DEP_NOTFOUND}    Dependency not found.
  BASH_EZ_EX_PAC_EXIST        ${BASH_EZ_EX_PAC_EXIST}    Package exist.
  BASH_EZ_EX__MAX             ${BASH_EZ_EX__MAX}    Ez special exit codes end.

  Bash Special Exit Codes

  BASH_EX_OK                  ${BASH_EX_OK}      successful termination.
  BASH_EX_GENERAL             ${BASH_EX_GENERAL}      catchall for general errors.
  BASH_EX_MISUSE              ${BASH_EX_MISUSE}      misuse of shell builtins (e.g., missing arg or permission problem).
  BASH_EX_EXECERR             ${BASH_EX_EXECERR}    command invoked cannot execute.
  BASH_EX_NOTFOUND            ${BASH_EX_NOTFOUND}    command not found.
  BASH_EX_INVALIDEXARG        ${BASH_EX_INVALIDEXARG}    invalid argument to 'exit'.
  BASH_EX_SIGFATAL_BASE       ${BASH_EX_SIGFATAL_BASE}    fatal error signal "n".
  BASH_EX_TERMCTRLC           ${BASH_EX_TERMCTRLC}    terminated by Ctrl-c.

  SYSEXITS.H

  BASH_SYS_EX__BASE           ${BASH_SYS_EX__BASE}     base value for error messages.
  BASH_SYS_EX_USAGE           ${BASH_SYS_EX_USAGE}     command line usage error.
  BASH_SYS_EX_DATAERR         ${BASH_SYS_EX_DATAERR}     data format error.
  BASH_SYS_EX_NOINPUT         ${BASH_SYS_EX_NOINPUT}     cannot open input.
  BASH_SYS_EX_NOUSER          ${BASH_SYS_EX_NOUSER}     addressee unknown.
  BASH_SYS_EX_NOHOST          ${BASH_SYS_EX_NOHOST}     host name unknown.
  BASH_SYS_EX_UNAVAILABLE     ${BASH_SYS_EX_UNAVAILABLE}     service unavailable.
  BASH_SYS_EX_SOFTWARE        ${BASH_SYS_EX_SOFTWARE}     internal software error.
  BASH_SYS_EX_OSERR           ${BASH_SYS_EX_OSERR}     system error (e.g., can't fork).
  BASH_SYS_EX_OSFILE          ${BASH_SYS_EX_OSFILE}     critical OS file missing.
  BASH_SYS_EX_CANTCREAT       ${BASH_SYS_EX_CANTCREAT}     can't create (user) output file.
  BASH_SYS_EX_IOERR           ${BASH_SYS_EX_IOERR}     input/output error.
  BASH_SYS_EX_TEMPFAIL        ${BASH_SYS_EX_TEMPFAIL}     temp failure; user is invited to retry.
  BASH_SYS_EX_PROTOCOL        ${BASH_SYS_EX_PROTOCOL}     remote error in protocol.
  BASH_SYS_EX_NOPERM          ${BASH_SYS_EX_NOPERM}     permission denied.
  BASH_SYS_EX_CONFIG          ${BASH_SYS_EX_CONFIG}     configuration error.
  BASH_SYS_EX__MAX            ${BASH_SYS_EX__MAX}     maximum listed value.

EOF
}


function handle_args() {
  local arg=
  for arg in ${@}; do
    local delim=""
    case "${arg}" in
      # translate --gnu-long-options to -g (short options)
      --package-dir)    args="${args:-}-D ";;
      --generate)       args="${args:-}-g ";;
      --json)           args="${args:-}-j ";;
      --destination)    args="${args:-}-o ";;
      --quiet)          args="${args:-}-q ";;
      --no-recurse)     args="${args:-}-R ";;
      --as-root)        args="${args:-}-S ";;
      --version)        args="${args:-}-V ";;
      --debug)          args="${args:-}-x ";;
      --skip-confirm)   args="${args:-}-y ";;
      --help)           args="${args:-}-h ";;
      # pass through anything else
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} "
        ;;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=true
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=4
  [[ -z "${GENERATE+x}" ]]        && GENERATE=false
  [[ -z "${JSON+x}" ]]            && JSON=false
  [[ -z "${RECURSIVE+x}" ]]       && RECURSIVE=true
  [[ -z "${AS_ROOT+x}" ]]         && AS_ROOT=false
  [[ -z "${DESTINATION+x}" ]]     && DESTINATION="${HOME}/Downloads"

  OPTIND=1
  while getopts "D:o:gjqRSxyhV" opt; do
    case ${opt} in
      D)
        PACKAGE_DIR="${OPTARG}"
        ;;
      o)
        DESTINATION="${OPTARG}"
        ;;
      g)
        GENERATE=true
        ;;
      j)
        JSON=true
        ;;
      q)
        VERBOSE=false
        LOG_DEBUG_LEVEL=3
        ;;
      R)
        RECURSIVE=false
        ;;
      S)
        AS_ROOT=true
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      h)
        usage; exit $BASH_EX_OK
        ;;
      V)
        echo "${SCRIPT_NAME} ${VERSION}"; exit $BASH_EX_OK
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -p /dev/stdin ]]; then
    error "Piped arguments not supported"
    usage;
    exit $BASH_SYS_EX_USAGE
  fi

  if [[ ! -t 0 && ! -p /dev/stdin ]]; then
    error "Stdin redirection not supported"
    usage;
    exit $BASH_SYS_EX_USAGE
  fi

  # Arguments from terminal
  if [[ -t 0 ]]; then
    if [[ -n "${@+x}" ]]; then
      IFS=" " read -a PACKAGES <<< "${@}"
    else
      error "No package(s) provided"
      exit $BASH_SYS_EX_USAGE
    fi
  fi

  local res=0

  if [[ ! -d "${DESTINATION}" ]]; then
    if execlog "mkdir -p '${DESTINATION}'"; then
      ok "'${DESTINATION}' directory created"
    else
      res=$?
      error "'${DESTINATION}' creation failed"
      exit $BASH_SYS_EX_CANTCREAT
    fi
  fi

  resolve_package_dir

  return $BASH_EX_OK
}

############################################################# MAIN EXECUTION ###

function _ctrl_c() {
  echo ""
  error "${SCRIPT_PATH} Interrupted!"
  exit $BASH_EX_TERMCTRLC
}


function _main () {
  script_vars
  handle_args "${SCRIPT_ARGS}"

  # Set up trap
  if "${DEBUG}"; then
    trap _ctrl_c INT TERM
  fi

  local -a packages=( ${PACKAGES[@]} )
  array_unique packages

  if $GENERATE; then
    batch_generate_package ${packages[@]}
  else
    ! ${DEBUG} && echo -e "About to install the following packages:\n"

    local res=0

    # TODO: Fully support json configs
    if ! $JSON; then
      validate_packages ${packages[@]}
      res=$?; [[ ${res} -ne $BASH_EX_OK ]] && return $res

      echo "Jsonifying..."
      pac_array_jsonify -R $RECURSIVE -S $AS_ROOT -- packages
    fi

    if $DEBUG && $VERBOSE || $JSON; then
      # echo "${packages[@]}"
      for package in ${packages[@]}; do
        echo "${package}" | ${EZ_DEP_JQ} -r ".package"
      done
    fi

    confirm "You are about to install the package(s) above. Continue? (Y/y): " \
      || exit $BASH_EX_GENERAL

    warning "Installation in progress... Do not interrupt!"

    pac_batch_json_install "${packages[@]}"
    res=$?; [[ $res -ne $BASH_EX_OK ]] && exit $res

    [[ -n "${packages+x}" ]] && pac_report
  fi

  finish "Finished!"
  return $BASH_EX_OK
}


res=0
_main
res=$?

unset EZ_VERSION
unset LOG_SYSLOG
unset LOG_FILELOG
unset SCRIPT_ARGS
unset DOWNLOADS_DIR
unset SKIP_CONFIRM
unset VERBOSE
unset DEBUG
unset LOG_DEBUG_LEVEL
unset GENERATE
unset JSON
unset RECURSIVE
unset AS_ROOT
unset DESTINATION
unset PACKAGE_DIR
unset PACKAGES

exit $res
