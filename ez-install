#!/usr/bin/env bash

set -o pipefail
set -o nounset

###################################################### EXTERNAL DEPENDENCIES ###

source "${BASH_SOURCE%/*}/.ez-installrc"
source "${BASH_SOURCE%/*}/common/include.sh"

include "${BASH_SOURCE%/*}/common/common.sh"
include "${BASH_SOURCE%/*}/common/array.sh"
include "${BASH_SOURCE%/*}/install/utils/actions.sh"
include "${BASH_SOURCE%/*}/install/utils/pac-logger.sh"
include "${BASH_SOURCE%/*}/install/pac-install.sh"
include "${BASH_SOURCE%/*}/install/install.sh"

################################################## CONSTANT GLOBAL VARIABLES ###

readonly VERSION="0.2"

readonly SCRIPT_ARGS="$@"

readonly LOG_SYSLOG=true
readonly LOG_FILELOG=true
readonly DOWNLOADS_DIR="${HOME}/Downloads"

# Source custom rc file if exist
CUSTOM_EZ_INSTALL_RC="${HOME}/.ez-installrc"
if [[ -e "${CUSTOM_EZ_INSTALL_RC}" ]]; then
  source "${CUSTOM_EZ_INSTALL_RC}"
fi

############################################################### FLAG OPTIONS ###


usage() {
  cat << EOF
${SCRIPT_NAME}

  Universal installer.

USAGE:

  ${SCRIPT_PATH} [ -hvVxy ]

OPTIONS:

  -V --version        version
  -v --verbose        verbose output
  -x --debug          debug mode (print all log levels)
  -y --skip-confirm   skip confirmation
  -h --help           help

EOF
}

function handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "${arg}" in
      # translate --gnu-long-options to -g (short options)
      --destination)    args="${args:-}-d ";;
      --package-dir)    args="${args:-}-D ";;
      --verbose)        args="${args:-}-v ";;
      --debug)          args="${args:-}-x ";;
      --skip-confirm)   args="${args:-}-y ";;
      --help)           args="${args:-}-h ";;
      --version)        args="${args:-}-V ";;
      #pass through anything else
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=false
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3

  OPTIND=1
  while getopts "d:D:f:m:p:P:vxyhV" opt; do
    case ${opt} in
      d)
        readonly DESTINATION="${OPTARG}"
        ;;
      d)
        PACKAGE_DIR="${OPTARG}"
        ;;
      f)
        readonly FLAGS="${OPTARG}"
        ;;
      m)
        readonly PACKAGE_MANAGER=$(echo "${OPTARG}" | awk '{print tolower($0)}')
        ;;
      v)
        VERBOSE=true
        LOG_DEBUG_LEVEL=4
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      h)
        usage; exit 0
        ;;
      V)
        printf "${SCRIPT_NAME} ${VERSION}\n"; exit 0
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -p /dev/stdin ]]; then
    error "Piped arguments not supported" 1
  fi

  if [[ ! -t 0 && ! -p /dev/stdin ]]; then
    error "Stdin redirection not supported" 1
  fi

  # Arguments from terminal
  if [[ -t 0 ]]; then
    if [[ -n "${@}" ]]; then
      IFS=" " read -a PACKAGES <<< "${@}"
    else
      error "No package(s) provided" 1
    fi
  fi

  if [[ -z ${PACKAGE_DIR+x} ]]; then
    PACKAGE_DIR="${BASH_SOURCE%/*}/generate/packages"
    PACKAGE_DIR="$(realpath -s "${PACKAGE_DIR}")"
  fi

  readonly SKIP_CONFIRM
  readonly VERBOSE
  readonly DEBUG
  readonly LOG_DEBUG_LEVEL
  readonly PACKAGE_DIR
  readonly PACKAGES

  return 0
}

############################################################# MAIN EXECUTION ###

_ctrl_c() {
  echo ""
  error "${SCRIPT_PATH} Interrupted!" 1
}

_main () {
  script_vars
  handle_args "${SCRIPT_ARGS}"

  # Set up trap
  if "${DEBUG}"; then
    trap _ctrl_c INT TERM
  fi

  for package in ${PACKAGES[@]}; do
    ./install/utils/dependency-tracker -p "${package}" -d "${PACKAGE_DIR}" -v
  done

  confirm "About to install the package(s) above. Continue? (Y/y): " || \
    exit $?

  # if [[ ! -d "${DOWNLOADS_DIR}" ]]; then
  #   mkdir -p "${DOWNLOADS_DIR}"
  # fi
  # cd ${DOWNLOADS_DIR}

  pac_batch_install "${PACKAGES[@]}"
  [[ -n "${PACKAGES+x}" ]] && pac_report

  finish "Installation success!"
}

_main

