#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "${EZ_INSTALL_HOME}/common/include.sh"

############################################################## LOAD RC FILES ###

include "${EZ_INSTALL_HOME}/.ez-installrc"
include "${HOME}/.ez-installrc"

###################################################### EXTERNAL DEPENDENCIES ###

include "${EZ_INSTALL_HOME}/install/const.sh"
include "${EZ_INSTALL_HOME}/common/common.sh"
include "${EZ_INSTALL_HOME}/common/array.sh"
include "${EZ_INSTALL_HOME}/common/sys.sh"
include "${EZ_INSTALL_HOME}/install/utils/actions.sh"
include "${EZ_INSTALL_HOME}/install/utils/pac-logger.sh"
include "${EZ_INSTALL_HOME}/install/utils/pac-transform.sh"
include "${EZ_INSTALL_HOME}/install/pac-install.sh"
include "${EZ_INSTALL_HOME}/install/install.sh"
include "${EZ_INSTALL_HOME}/install/common.sh"

################################################## CONSTANT GLOBAL VARIABLES ###

readonly EZ_VERSION="0.2-beta"
readonly LOG_SYSLOG=true
readonly LOG_FILELOG=true
readonly SCRIPT_ARGS="$@"
readonly DOWNLOADS_DIR="${HOME}/Downloads"

############################################################### FLAG OPTIONS ###


function usage() {
  cat << EOF
${SCRIPT_NAME}

  Universal installer.

USAGE:

  ${SCRIPT_PATH} [ -hvVxy ]

OPTIONS:

  -V --version        version
  -v --verbose        verbose output
  -x --debug          debug mode (print all log levels)
  -y --skip-confirm   skip confirmation
  -h --help           help

EOF
}


function handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "${arg}" in
      # translate --gnu-long-options to -g (short options)
      --destination)    args="${args:-}-d ";;
      --package-dir)    args="${args:-}-D ";;
      --as-root)        args="${args:-}-S ";;
      --verbose)        args="${args:-}-v ";;
      --debug)          args="${args:-}-x ";;
      --skip-confirm)   args="${args:-}-y ";;
      --help)           args="${args:-}-h ";;
      --version)        args="${args:-}-V ";;
      #pass through anything else
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${RUN_AS_SU+x}" ]]       && RUN_AS_SU=false
  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=false
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3

  OPTIND=1
  while getopts "d:D:SvxyhV" opt; do
    case ${opt} in
      d)
        DESTINATION="${OPTARG}"
        ;;
      D)
        PACKAGE_DIR="${OPTARG}"
        ;;
      S)
        RUN_AS_SU=true
        ;;
      v)
        VERBOSE=true
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      h)
        usage; exit $BASH_EX_OK
        ;;
      V)
        echo "${SCRIPT_NAME} ${VERSION}"; exit $BASH_EX_OK
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -p /dev/stdin ]]; then
    error "Piped arguments not supported"
    exit $BASH_SYS_EX_USAGE
  fi

  if [[ ! -t 0 && ! -p /dev/stdin ]]; then
    error "Stdin redirection not supported"
    exit $BASH_SYS_EX_USAGE
  fi

  # Arguments from terminal
  if [[ -t 0 ]]; then
    if [[ -n "${@+x}" ]]; then
      IFS=" " read -a PACKAGES <<< "${@}"
    else
      error "No package(s) provided"
      exit $BASH_SYS_EX_USAGE
    fi
  fi

  resolve_package_dir

  readonly RUN_AS_SU
  readonly SKIP_CONFIRM
  readonly VERBOSE
  readonly DEBUG
  readonly LOG_DEBUG_LEVEL
  readonly DESTINATION
  readonly PACKAGE_DIR
  readonly PACKAGES

  return $BASH_EX_OK
}

############################################################# MAIN EXECUTION ###

function _ctrl_c() {
  echo ""
  error "${SCRIPT_PATH} Interrupted!"
  exit $BASH_EX_TERMCTRLC
}

function _main () {
  script_vars
  handle_args "${SCRIPT_ARGS}"

  # Set up trap
  if "${DEBUG}"; then
    trap _ctrl_c INT TERM
  fi

  local -a packages=( ${PACKAGES[@]} )
  array_unique packages

  ! ${DEBUG} && echo -e "About to install the following packages:\n"

  local continue=false
  for package in ${packages[@]}; do
    validate_package "${package}"
    local res=$?
    if ! ${continue} && [[ ${res} -eq $BASH_EX_OK ]]; then
      continue=true
    fi
  done
  ! ${continue} && exit ${res}

  info "Jsonifying..."
  pac_array_jsonify -S $RUN_AS_SU packages

  if $DEBUG && $VERBOSE; then
    echo "${packages[@]}"
    for package in "${packages[@]}"; do
      echo "${package}" | ./lib/parser/jq -r ".package"
    done
  fi

  confirm "You are about to install the package(s) above. Continue? (Y/y): " \
    || exit $BASH_EX_GENERAL

  # if [[ ! -d "${DOWNLOADS_DIR}" ]]; then
  #   mkdir -p "${DOWNLOADS_DIR}"
  # fi
  # cd ${DOWNLOADS_DIR}

  local res=0

  pac_batch_json_install "${packages[@]}"
  res=$?; [[ $res -ne $BASH_EX_OK ]] && exit $res

  [[ -n "${packages+x}" ]] && pac_report

  finish "Installation finished!"
  return $BASH_EX_OK
}

_main

