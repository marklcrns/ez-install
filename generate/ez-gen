#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "$(dirname -- $(realpath -- "${BASH_SOURCE[0]}"))/../.ez-installrc"
source "${EZ_INSTALL_HOME}/common/include.sh"

include "${EZ_INSTALL_HOME}/common/common.sh"
include "${EZ_INSTALL_HOME}/install/common.sh"
include "${EZ_INSTALL_HOME}/install/const.sh"
include "${EZ_INSTALL_HOME}/install/utils/actions.sh"

SCRIPT_ARGS="${@}"

function usage() {
  local scriptpath="$(realpath -- "${0}")"

cat <<- EOF
$(basename -- "${scriptpath}")

  Package generator for ez, a universal BASH package installer.


USAGE:

  ./$(basename -- "${scriptpath}") [-h] [-vxy] package


OPTIONS:

  --author           -a    Package author (optional)
  --command-name     -c    Package installation dependencies
  --dependency       -d    Package installation dependencies
  --package-manager  -m    Package manager installer
  --package-name     -n    Package filename
  --destination      -o    Package output directory (for curl, wget, etc.)
                           default=$HOME/Downloads
  --package-dir      -p    Directory to generate packages to.
                           default=$LOCAL_PACKAGE_DIR
  --global           -G    Generate to global generate package directory.
                           Overrides '--package-dir'.

  --verbose          -v    Verbose output. LOG_DEBUG_LEVEL=4
  --debug            -x    Debug mode (print all log levels). LOG_DEBUG_LEVEL=7
  --skip-confirm     -y    Skip confirmation
  --help             -h    Print usage

EOF
}

function handle_args() {
  local arg=
  for arg in ${@}; do
    local delim=""
    case "${arg}" in
      --author)           args="${args:-}-a ";;
      --command-name)     args="${args:-}-c ";;
      --dependency)       args="${args:-}-d ";;
      --package-manager)  args="${args:-}-m ";;
      --package-name)     args="${args:-}-n ";;
      --destination)      args="${args:-}-o ";;
      --package-dir)      args="${args:-}-p ";;
      --global)           args="${args:-}-G ";;
      --skip-confirm)     args="${args:-}-y ";;
      --verbose)          args="${args:-}-v ";;
      --debug)            args="${args:-}-x ";;
      --help)             args="${args:-}-h ";;
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=false
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3

  ARGS=""
  AUTHOR=""
  COMMAND_NAME=""
  DEPENDENCIES=""
  FILE=""
  PACKAGE_MANAGER=""
  PACKAGE_NAME=""
  DESTINATION=""
  GEN_PACKAGE_DIR=""
  IS_GLOBAL=false
  UPDATE=false

  OPTIND=1
  while getopts "a:A:c:d:m:n:o:p:u:Gvxyh" opt; do
    case ${opt} in
      a)
        ARGS="${OPTARG}"
        ;;
      A)
        AUTHOR="${OPTARG}"
        ;;
      c)
        COMMAND_NAME="${OPTARG}"
        ;;
      d)
        DEPENDENCIES="${OPTARG}"
        ;;
      m)
        PACKAGE_MANAGER="$(echo "${OPTARG}" | awk '{print tolower($0)}')"
        ;;
      n)
        PACKAGE_NAME="${OPTARG}"
        ;;
      o)
        DESTINATION="${OPTARG}"
        ;;
      p)
        GEN_PACKAGE_DIR="${OPTARG}"
        ;;
      G)
        IS_GLOBAL=true
        ;;
      u)
        UPDATE=${OPTARG}
        ;;
      v)
        VERBOSE=true
        LOG_DEBUG_LEVEL=4
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      h)
        usage; exit 0
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -z "${@+x}" ]] && [[ "${PACKAGE_MANAGER}" != "local" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    exit $BASH_SYS_EX_USAGE
  fi

  PACKAGE="${@:-${PACKAGE_NAME}}"
  PACKAGE_NAME="${PACKAGE_NAME:-${PACKAGE}}"
  COMMAND_NAME="${COMMAND_NAME:-${PACKAGE_NAME}}"
  FILE="${PACKAGE_NAME:-${PACKAGE}}"

  if [[ ${PACKAGE_MANAGER} == "curl" ]] || [[ ${PACKAGE_MANAGER} == "wget" ]] || [[ ${PACKAGE_MANAGER} == "git" ]]; then
    if [[ -z "${PACKAGE_NAME}" ]]; then
      error "No package name provided for '${PACKAGE_MANAGER} ${PACKAGE}'"
      exit $BASH_SYS_EX_USAGE
    fi
  fi

  resolve_package_dir
  if $IS_GLOBAL; then
    GEN_PACKAGE_DIR="${PACKAGE_DIR}"
  elif [[ -z "${GEN_PACKAGE_DIR}" ]]; then
    GEN_PACKAGE_DIR="${LOCAL_PACKAGE_DIR}"
  fi

  return $BASH_EX_OK
}


function _check_package() {
  local package="${1:-}"
  local prompt="${2:-Do you wish to continue? (Y/y): }"

  if [[ -z "${@+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  if [[ -e "${package}" ]] && ! $SKIP_CONFIRM; then
    confirm "'${package}' already exists. ${prompt}" || return $BASH_EZ_EX_PAC_EXIST
  fi
}


function generate_template() {
  local file_path="${1:-}"

  local res=0
  _check_package "${file_path}"
  res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res

cat > "${file_path}" <<- ___EOF___
#!/usr/bin/env bash

########################################################### PACKAGE METADATA ###
# ---
# package: ${FILE}
# executable: ${COMMAND_NAME}
# package-manager: ${PACKAGE_MANAGER}
# dependency: ${DEPENDENCIES}
# author: ${AUTHOR}
# date: $(date "+%Y-%m-%d")
# ---
################################################################################

source "\${EZ_INSTALL_HOME}/install/init.sh"

############################################################## START INSTALL ###

# ${FILE} installation template generated by ez-install

function _main() {
  local as_root=false
  handle_package_args \${@}

  # Package name defaults to filename
  local args="${ARGS}"
  local package="${PACKAGE}"
  local package_name="${PACKAGE_NAME}"
  local executable_name="${COMMAND_NAME}"
  local package_manager="${PACKAGE_MANAGER:-}"
  local destination="${DESTINATION:-}"
  local res=0

  # Get system package manager
  [[ -z "\${package_manager}" ]] && get_sys_package_manager package_manager

  # Install package
  install -a "\${args}" \\
          -c "\${executable_name}" \\
          -n "\${package_name}" \\
          -u ${UPDATE} \\
          -S "\${as_root}" -- \\
          "\${package_manager}" \\
          "\${package}" \\
          "\${destination}"

  res=\$?
  return \${res}
}

################################################################ END INSTALL ###

res=0
_main "\${@}"
res=\$?

return \$res
# SOURCED BY \`pac-install()\`, DO NOT USE \`exit\`. USE \`return\` INSTEAD
___EOF___

  if eval "chmod +x '${file_path}'"; then
    ok "${file_path} package created!"
  else
    error "${file_path} package creation failed!"
  fi
}


function _main() {
  handle_args "${SCRIPT_ARGS}"
  if [[ -z "${PACKAGE_MANAGER}" ]]; then
    local file_path="${GEN_PACKAGE_DIR}/${FILE}"
  else
    local file_path="${GEN_PACKAGE_DIR}/${FILE}.${PACKAGE_MANAGER}"
  fi

  local res=0

  if [[ ! -d "${GEN_PACKAGE_DIR}" ]]; then
    if execlog "mkdir -p '${GEN_PACKAGE_DIR}'"; then
      ok "'${GEN_PACKAGE_DIR}' directory created"
    else
      res=$?
      error "'${GEN_PACKAGE_DIR}' creation failed"
      return $BASH_SYS_EX_CANTCREAT
    fi
  fi

  generate_template "${file_path}"
  res=$?
  return $res
}


res=0
_main
res=$?

unset ARGS
unset AUTHOR
unset COMMAND_NAME
unset DEPENDENCIES
unset FILE
unset PACKAGE
unset PACKAGE_MANAGER
unset PACKAGE_NAME
unset DESTINATION
unset GEN_PACKAGE_DIR
unset IS_GLOBAL
unset UPDATE

exit $res
