#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "$(dirname -- $(realpath -- "${BASH_SOURCE[0]}"))/../.ez-installrc"
source "${EZ_INSTALL_HOME}/common/include.sh"

###################################################### EXTERNAL DEPENDENCIES ###

include "${EZ_INSTALL_HOME}/common/common.sh"
include "${EZ_INSTALL_HOME}/generate/utils/generate.sh"
include "${EZ_INSTALL_HOME}/install/common.sh"
include "${EZ_INSTALL_HOME}/const.sh"
include "${EZ_INSTALL_HOME}/actions.sh"

################################################## CONSTANT GLOBAL VARIABLES ###

readonly EZ_GEN_VERSION="0.3 BETA"
readonly SCRIPT_ARGS="${@}"

############################################################### FLAG OPTIONS ###

function usage() {
  local scriptpath="$(realpath -- "${0}")"

cat <<- EOF
${SCRIPT_NAME} ${EZ_GEN_VERSION}

COMMAND NAME:

  ${SCRIPT_NAME} - Ez package generator.

GEN USAGE:

  ez ${SCRIPT_NAME} [options] package

GEN OPTIONS:

  Flag option with arguments

    --author           -a    Package author.
    --command-name     -c    Package executable name.
    --dependency       -d    Package installation dependencies.
    --package-dir      -D    Directory to generate packages to.
                             default=\$LOCAL_PACKAGE_ROOT_DIR.
                             global=\$PACKAGE_ROOT_DIR.
    --global           -G    Generate to global generate package directory.
                             Overrides '--package-dir'.
    --package-manager  -m    Package manager installer. '--package-name' is
                             required for curl, wget, and git.
    --package-name     -n    Package filename.
    --destination      -o    Package output directory (for curl, wget, etc.).
                             default=\$HOME/Downloads.

  Flag option switches

    --execute          -e    Pipe package with \`| sh\` to execute. (for curl, wget).
    --skip-edit        -E    Do not edit file(s) after generating.
    --interactive      -i    Run interactive mode.
    --pre              -p    Generate package pre installation.
    --post             -P    Generate package post installation.
    --skip-main        -M    Skip main package generation. Requires --pre and/or
                             --post flag(s) to be active.
    --update           -u    Update package manager repository before installation
                             (for apt, pkg, etc.).
    --quiet            -q    Suppress standard output. LOG_DEBUG_LEVEL=3.
    --as_root          -s    Set package default privileges as root.
    --debug            -x    Debug mode (print all log levels). LOG_DEBUG_LEVEL=7.
    --skip-confirm     -y    Skip confirmation.
    --no-colors        -z    Disable output colors.
    --help             -h    Print usage.
    --version          -V    Print gen version.

EOF
}


function handle_args() {
  local arg=
  for arg in ${@}; do
    local delim=""
    case "${arg}" in
      --author)           args="${args:-}-a ";;
      --command-name)     args="${args:-}-c ";;
      --dependency)       args="${args:-}-d ";;
      --package-dir)      args="${args:-}-D ";;
      --execute)          args="${args:-}-e ";;
      --package-manager)  args="${args:-}-m ";;
      --package-name)     args="${args:-}-n ";;
      --destination)      args="${args:-}-o ";;
      --skip-edit)        args="${args:-}-E ";;
      --global)           args="${args:-}-G ";;
      --interactive)      args="${args:-}-i ";;
      --skip-main)        args="${args:-}-M ";;
      --pre)              args="${args:-}-p ";;
      --post)             args="${args:-}-P ";;
      --quiet)            args="${args:-}-q ";;
      --as_root)          args="${args:-}-s ";;
      --update)           args="${args:-}-u ";;
      --debug)            args="${args:-}-x ";;
      --skip-confirm)     args="${args:-}-y ";;
      --no-colors)        args="${args:-}-z ";;
      --help)             args="${args:-}-h ";;
      --version)          args="${args:-}-V ";;
      *)
        # Don't work with OPTARG with spaces
        # [[ "${arg:0:1}" == "-" ]] || delim="\""
        # args="${args:-}${delim}${arg}${delim} ";;

        # Do not surround with " to allow OPTARG with '\ '
        args="${args:-} ${arg}";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=true
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3
  [[ -z "${ENABLE_COLORS+x}" ]]   && ENABLE_COLORS=true

  ARGS=""
  AUTHOR=""
  COMMAND_NAME=""
  DEPENDENCIES=""
  FILE=""
  PACKAGE_MANAGER=""
  PACKAGE_NAME=""
  DESTINATION=""
  GEN_PACKAGE_ROOT_DIR=""
  GEN_PACKAGE_DIR=""
  INTERACTIVE=false
  GENERATE_PRE=false
  GENERATE_POST=false
  AS_ROOT=false
  SKIP_MAIN=false
  SKIP_EDIT=false
  EXECUTE=false
  GLOBAL=false
  UPDATE=false

  OPTIND=1
  while getopts "a:A:c:d:D:m:n:o:ipPeEuGqsMxyzhV" opt; do
    case ${opt} in
      a)
        ARGS="${OPTARG}"
        ;;
      A)
        AUTHOR="${OPTARG}"
        ;;
      c)
        COMMAND_NAME="${OPTARG}"
        ;;
      d)
        DEPENDENCIES="${OPTARG}"
        ;;
      D)
        GEN_PACKAGE_ROOT_DIR="${OPTARG}"
        ;;
      m)
        PACKAGE_MANAGER="$(echo "${OPTARG}" | awk '{print tolower($0)}')"
        ;;
      n)
        PACKAGE_NAME="${OPTARG}"
        ;;
      o)
        DESTINATION="${OPTARG}"
        ;;
      i)
        INTERACTIVE=true
        ;;
      p)
        GENERATE_PRE=true
        ;;
      P)
        GENERATE_POST=true
        ;;
      e)
        EXECUTE=true
        ;;
      E)
        SKIP_EDIT=true
        ;;
      G)
        GLOBAL=true
        ;;
      M)
        SKIP_MAIN=true
        ;;
      q)
        VERBOSE=false
        LOG_DEBUG_LEVEL=3
        ;;
      s)
        AS_ROOT=true
        ;;
      u)
        UPDATE=true
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      z)
        ENABLE_COLORS=false
        include "${EZ_INSTALL_HOME}/common/colors.sh"
        ;;
      h)
        usage; exit 0
        ;;
      V)
        echo "${SCRIPT_NAME} ${EZ_GEN_VERSION}"; exit $BASH_EX_OK
        ;;
      *)
        usage
        error "Invalid flag option(s)"
        exit $BASH_SYS_EX_USAGE
    esac
  done
  shift "$((OPTIND-1))"

  if ! $INTERACTIVE && [[ -z "${1+x}" ]] && [[ "${PACKAGE_MANAGER}" != "local" ]]; then
    usage
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    exit $BASH_SYS_EX_USAGE
  fi

  resolve_package_dir

  if [[ ${PACKAGE_MANAGER} == "curl" ]] || [[ ${PACKAGE_MANAGER} == "wget" ]] || [[ ${PACKAGE_MANAGER} == "git" ]]; then
    if [[ -z "${PACKAGE_NAME}" ]]; then
      usage
      error "No package name provided for '${PACKAGE_MANAGER} ${1}'"
      exit $BASH_SYS_EX_USAGE
    fi
  fi

  PACKAGE="${1:-${PACKAGE_NAME}}"
  PACKAGE_NAME="${PACKAGE_NAME:-${PACKAGE}}"
  FILE="${PACKAGE_NAME:-${PACKAGE}}"

  if $GLOBAL; then
    GEN_PACKAGE_ROOT_DIR="${PACKAGE_ROOT_DIR}"
    GEN_PACKAGE_DIR="${PACKAGE_DIR}"
  elif [[ -z "${GEN_PACKAGE_ROOT_DIR}" ]]; then
    GEN_PACKAGE_ROOT_DIR="${LOCAL_PACKAGE_ROOT_DIR}"
    GEN_PACKAGE_DIR="${LOCAL_PACKAGE_DIR}"
  else
    local distrib_id="${OS_DISTRIB_ID}"; to_lower distrib_id
    local distrib_release="${OS_DISTRIB_RELEASE}"
    GEN_PACKAGE_DIR="${GEN_PACKAGE_ROOT_DIR}/${distrib_id}/${distrib_release}"
  fi

  return $BASH_EX_OK
}

######################################################## FUNCTION DEFINITION ###

function check_package() {
  if [[ -z "${1+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  local package="${1:-}"

  if [[ -z "${@+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  [[ -e "${package}" ]] && return 0 || return $BASH_EX_GENERAL
}


function give_exec_permission() {
  if [[ -z "${1+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  local file_path="${1}"
  local res=0

  if [[ -e "${file_path}" ]]; then
    if eval "chmod +x '${file_path}'"; then
      finish "${file_path} package created!"
      return $BASH_EX_OK
    fi
    res=$?
  else
    res=$BASH_EZ_EX_PAC_NOTFOUND
  fi

  error "${file_path} package creation failed!"
  return $res
}


function open_editor_package() {
  if [[ -z "${1+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  local file_path="${1}"
  local editor="${EZ_EDITOR:-${EDITOR}}"

  if [[ -z "${editor}" ]]; then
    error "No \$EDITOR specified to edit package"
  fi

  $SKIP_EDIT && return $BASH_EX_OK

  if check_package "${file_path}"; then
    if prompt_confirm "Do you wish to edit '${file_path}' now? (y/N): "; then
      ${editor} "${file_path}"
    fi
    return $BASH_EX_OK
  fi
  return $BASH_EZ_EX_PAC_EXIST
}


function generate_template_main() {
  if [[ -z "${1+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  local file_path="${1}"
  local res=0

  if check_package "${file_path}" && ! $SKIP_CONFIRM; then
    confirm "'${file_path}' already exist. Continue? (Y/y): " || return $BASH_EZ_EX_PAC_EXIST
  fi

  if execlog "echo -n '' > '${file_path}' && chmod +x '${file_path}'"; then
    while IFS= read -r line; do
      eval "echo \"${line}\" >> '${file_path}'"
    done < "${EZ_INSTALL_HOME}/generate/utils/pac_template.txt"
    res=$?
  else
    error "${file_path} package creation failed!"
    res=$BASH_SYS_EX_CANTCREAT
  fi

  return $res
}


function generate_template_pre() {
  if [[ -z "${1+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  local file_path="${1}.pre"
  local res=0

  if check_package "${file_path}" && ! $SKIP_CONFIRM; then
    confirm "'${file_path}' already exist. Continue? (Y/y): " || return $BASH_EZ_EX_PAC_EXIST
  fi

  if execlog "echo -n '' > '${file_path}' && chmod +x '${file_path}'"; then
    while IFS= read -r line; do
      eval "echo \"${line}\" >> '${file_path}'"
    done < "${EZ_INSTALL_HOME}/generate/utils/pac_pre_template.txt"
    res=$?
  else
    error "${file_path} package creation failed!"
    res=$BASH_SYS_EX_CANTCREAT
  fi

  return $res
}


function generate_template_post() {
  if [[ -z "${1+x}" ]]; then
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    return $BASH_SYS_EX_USAGE
  fi

  local file_path="${1}.post"
  local res=0

  if check_package "${file_path}" && ! $SKIP_CONFIRM; then
    confirm "'${file_path}' already exist. Continue? (Y/y): " || return $BASH_EZ_EX_PAC_EXIST
  fi

  if execlog "echo -n '' > '${file_path}' && chmod +x '${file_path}'"; then
    while IFS= read -r line; do
      eval "echo \"${line}\" >> '${file_path}'"
    done < "${EZ_INSTALL_HOME}/generate/utils/pac_post_template.txt"
    res=$?
  else
    error "${file_path} package creation failed!"
    res=$BASH_SYS_EX_CANTCREAT
  fi

  return $res
}

############################################################# MAIN EXECUTION ###

function _main() {
  local res=0

  script_vars
  handle_args "${SCRIPT_ARGS}"
  res=$?
  [[ $res -ne $BASH_EX_OK ]] && return $res

  if $INTERACTIVE; then
    local main="true"
    local pre=""
    local post=""

    ! $SKIP_MAIN && prompt_boolean main "Generate main package (default=true)? "
    prompt_boolean pre "Generate pre package (default=false)? "
    prompt_boolean post "Generate post package (default=false)? "

    $main && i_generate_template_main -D "${GEN_PACKAGE_ROOT_DIR}" "${PACKAGE}"
    $pre && i_generate_template_pre -D "${GEN_PACKAGE_ROOT_DIR}" "${PACKAGE}"
    $post && i_generate_template_post -D "${GEN_PACKAGE_ROOT_DIR}" "${PACKAGE}"
  else
    if [[ -z "${PACKAGE_MANAGER}" ]]; then
      local file_path="${GEN_PACKAGE_DIR}/${FILE}"
    else
      local file_path="${GEN_PACKAGE_DIR}/${FILE}.${PACKAGE_MANAGER}"
    fi

    if [[ ! -d "${GEN_PACKAGE_DIR}" ]]; then
      if execlog "mkdir -p '${GEN_PACKAGE_DIR}'"; then
        ok "'${GEN_PACKAGE_DIR}' directory created"
      else
        res=$?
        error "'${GEN_PACKAGE_DIR}' creation failed"
        return $BASH_SYS_EX_CANTCREAT
      fi
    fi

    local continue=""
    if $GENERATE_PRE || $GENERATE_POST; then
      if ! $SKIP_MAIN && confirm "Would you like to generate the main package template? (Y/y): "; then
        generate_template_main "${file_path}"
        res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
        open_editor_package "${file_path}"
        finish "Package generated in to '${file_path}'"
      fi
      if $GENERATE_PRE; then
        generate_template_pre "${file_path}"
        res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
        open_editor_package "${file_path}.pre"
        finish "Package generated in to '${file_path}.pre'"
      fi
      if $GENERATE_POST; then
        generate_template_post "${file_path}"
        res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
        open_editor_package "${file_path}.post"
        finish "Package generated in to '${file_path}.post'"
      fi
    else
      generate_template_main "${file_path}"
      res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
      open_editor_package "${file_path}"
      finish "Package generated in to '${file_path}'"
    fi
  fi
  return $res
}


res=0
_main
res=$?

unset SKIP_CONFIRM
unset VERBOSE
unset DEBUG
unset LOG_DEBUG_LEVEL
unset ENABLE_COLORS
unset ARGS
unset AUTHOR
unset COMMAND_NAME
unset DEPENDENCIES
unset FILE
unset PACKAGE
unset PACKAGE_MANAGER
unset PACKAGE_NAME
unset DESTINATION
unset GEN_PACKAGE_DIR
unset GENERATE_PRE
unset GENERATE_POST
unset SKIP_MAIN
unset SKIP_EDIT
unset EXECUTE
unset GLOBAL
unset UPDATE

exit $res
