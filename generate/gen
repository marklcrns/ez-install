#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "$(dirname -- $(realpath -- "${BASH_SOURCE[0]}"))/../.ez-installrc"
source "${EZ_INSTALL_HOME}/common/include.sh"

###################################################### EXTERNAL DEPENDENCIES ###

include "${EZ_INSTALL_HOME}/common/common.sh"
include "${EZ_INSTALL_HOME}/common/array.sh"
include "${EZ_INSTALL_HOME}/generate/utils/generate.sh"
include "${EZ_INSTALL_HOME}/install/common.sh"
include "${EZ_INSTALL_HOME}/const.sh"
include "${EZ_INSTALL_HOME}/actions.sh"

################################################## CONSTANT GLOBAL VARIABLES ###

readonly EZ_GEN_VERSION="0.3 BETA"
readonly SCRIPT_ARGS="${@}"

############################################################### FLAG OPTIONS ###

function usage() {
  local scriptpath="$(realpath -- "${0}")"

cat <<- EOF
${SCRIPT_NAME} ${EZ_GEN_VERSION}

COMMAND NAME:

  ${SCRIPT_NAME} - Ez package generator.

GEN USAGE:

  ez ${SCRIPT_NAME} [options] package

GEN OPTIONS:

  Flag option with arguments

    --author           -a    Package author.
    --command-name     -c    Package executable name.
    --dependency       -d    Package installation dependencies.
    --package-dir      -D    Directory to generate packages to.
                             default=\$LOCAL_PACKAGE_ROOT_DIR.
                             global=\$PACKAGE_ROOT_DIR.
    --global           -G    Generate to global generate package directory.
                             Overrides '--package-dir'.
    --package-manager  -m    Package manager installer. '--package-name' is
                             required for curl, wget, and git.
    --package-name     -n    Package filename.
    --destination      -o    Package output directory (for curl, wget, etc.).
                             default=\$HOME/Downloads.

  Flag option switches

    --execute          -e    Pipe package with \`| sh\` to execute. (for curl, wget).
    --no-execute       -E    Do not pipe package with \`| sh\` to execute. (for curl, wget).
    --force            -f    Force package installation.
    --no-force         -f    Do not force package installation.
    --pre              -p    Generate package pre installation.
    --post             -P    Generate package post installation.
    --update           -u    Update package manager repository before installation
                             (for apt, pkg, etc.).
    --as_root          -s    Set package default privileges as root.
    --no_root          -S    Do not set package default privileges as root.
    --interactive      -i    Run interactive mode.
    --skip-main        -M    Skip main package generation. Requires --pre and/or
                             --post flag(s) to be active.
    --quiet            -q    Suppress standard output. LOG_DEBUG_LEVEL=3.
    --skip-edit        -t    Do not edit file(s) after generating.
    --debug            -x    Debug mode (print all log levels). LOG_DEBUG_LEVEL=7.
    --skip-confirm     -y    Skip confirmation.
    --no-colors        -z    Disable output colors.
    --help             -h    Print usage.
    --version          -V    Print gen version.

EOF
}


function handle_args() {
  local arg=
  for arg in ${@}; do
    local delim=""
    case "${arg}" in
      --author)           args="${args:-}-a ";;
      --command-name)     args="${args:-}-c ";;
      --dependency)       args="${args:-}-d ";;
      --package-dir)      args="${args:-}-D ";;
      --execute)          args="${args:-}-e ";;
      --no-execute)       args="${args:-}-E ";;
      --force)            args="${args:-}-f ";;
      --no-force)         args="${args:-}-F ";;
      --package-manager)  args="${args:-}-m ";;
      --package-name)     args="${args:-}-n ";;
      --destination)      args="${args:-}-o ";;
      --global)           args="${args:-}-G ";;
      --interactive)      args="${args:-}-i ";;
      --skip-main)        args="${args:-}-M ";;
      --pre)              args="${args:-}-p ";;
      --post)             args="${args:-}-P ";;
      --quiet)            args="${args:-}-q ";;
      --as_root)          args="${args:-}-s ";;
      --no_root)          args="${args:-}-S ";;
      --skip-edit)        args="${args:-}-t ";;
      --update)           args="${args:-}-u ";;
      --no-update)        args="${args:-}-U ";;
      --debug)            args="${args:-}-x ";;
      --skip-confirm)     args="${args:-}-y ";;
      --no-colors)        args="${args:-}-z ";;
      --help)             args="${args:-}-h ";;
      --version)          args="${args:-}-V ";;
      *)
        # Don't work with OPTARG with spaces
        # [[ "${arg:0:1}" == "-" ]] || delim="\""
        # args="${args:-}${delim}${arg}${delim} ";;

        # Do not surround with " to allow OPTARG with '\ '
        args="${args:-} ${arg}";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=true
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3
  [[ -z "${ENABLE_COLORS+x}" ]]   && ENABLE_COLORS=true

  ARGS=""
  AUTHOR=""
  COMMAND_NAME=""
  DEPENDENCIES=""
  PACKAGE_MANAGER=""
  PACKAGE_NAME=""
  DESTINATION=""
  GEN_PACKAGE_ROOT_DIR=""
  GEN_PACKAGE_DIR=""
  INTERACTIVE=false
  GENERATE_PRE=false
  GENERATE_POST=false
  AS_ROOT=false
  ALLOW_DEP_FAIL=false
  SKIP_MAIN=false
  SKIP_EDIT=false
  EXECUTE=false
  FORCE=false
  GLOBAL=false
  UPDATE=false

  CONFIG=""

  OPTIND=1
  while getopts "a:A:c:d:m:n:o:eEfFsSuUwWD:GiMpPtqxyzhV" opt; do
    case ${opt} in
      # For single package
      a) ARGS="${OPTARG}" ;;
      c) COMMAND_NAME="${OPTARG}" ;;
      d) DEPENDENCIES="${OPTARG}" ;;
      n) PACKAGE_NAME="${OPTARG}" ;;
      # Inherited by multiple packages
      A) AUTHOR="${OPTARG}";          CONFIG="${CONFIG} -${opt} ${OPTARG}" ;;
      m) PACKAGE_MANAGER="${OPTARG}"; CONFIG="${CONFIG} -${opt} ${OPTARG}" ;;
      o) DESTINATION="${OPTARG}";     CONFIG="${CONFIG} -${opt} ${OPTARG}" ;;
      # TODO: Add in-line package opts for flag switches
      e) EXECUTE=true;                CONFIG="${CONFIG} -${opt}" ;;
      E) EXECUTE=false;               CONFIG="${CONFIG} -${opt}" ;;
      e) FORCE=true;                  CONFIG="${CONFIG} -${opt}" ;;
      E) FORCE=false;                 CONFIG="${CONFIG} -${opt}" ;;
      s) AS_ROOT=true;                CONFIG="${CONFIG} -${opt}" ;;
      S) AS_ROOT=false;               CONFIG="${CONFIG} -${opt}" ;;
      u) UPDATE=true;                 CONFIG="${CONFIG} -${opt}" ;;
      U) UPDATE=false;                CONFIG="${CONFIG} -${opt}" ;;
      w) ALLOW_DEP_FAIL=true;         CONFIG="${CONFIG} -${opt}" ;;
      W) ALLOW_DEP_FAIL=false;        CONFIG="${CONFIG} -${opt}" ;;
      D) GEN_PACKAGE_ROOT_DIR="${OPTARG}" ;;
      G) GLOBAL=true ;;
      i) INTERACTIVE=true ;;
      M) SKIP_MAIN=true ;;
      p) GENERATE_PRE=true ;;
      P) GENERATE_POST=true ;;
      t) SKIP_EDIT=true ;;
      q) VERBOSE=false; LOG_DEBUG_LEVEL=3 ;;
      x) DEBUG=true; LOG_DEBUG_LEVEL=7 ;;
      y) SKIP_CONFIRM=true ;;
      z)
        ENABLE_COLORS=false
        include "${EZ_INSTALL_HOME}/common/colors.sh"
        ;;
      h)
        usage; exit 0
        ;;
      V)
        echo "${SCRIPT_NAME} ${EZ_GEN_VERSION}"; exit $BASH_EX_OK
        ;;
      *)
        usage
        error "Invalid flag option(s)"
        exit $BASH_SYS_EX_USAGE
    esac
  done
  shift "$((OPTIND-1))"

  if ! $INTERACTIVE && [[ -z "${@+x}" ]] && [[ "${PACKAGE_MANAGER}" != "local" ]]; then
    usage
    error "${BASH_SYS_MSG_USAGE_MISSARG}"
    exit $BASH_SYS_EX_USAGE
  fi

  resolve_package_dir

  if [[ ${PACKAGE_MANAGER} == "curl" ]] || [[ ${PACKAGE_MANAGER} == "wget" ]] || [[ ${PACKAGE_MANAGER} == "git" ]]; then
    if [[ -z "${PACKAGE_NAME}" ]]; then
      usage
      error "No package name provided for '${PACKAGE_MANAGER} ${1}'"
      exit $BASH_SYS_EX_USAGE
    fi
  fi

  # Arguments from terminal into $PACKAGES
  if [[ -t 0 ]]; then
    if [[ -n "${@+x}" ]]; then
      IFS=" " read -a PACKAGES <<< "${@}"
      readonly PACKAGES
    else
      usage
      error "No package(s) provided"
      exit $BASH_SYS_EX_USAGE
    fi
  fi

  if $GLOBAL; then
    GEN_PACKAGE_ROOT_DIR="${PACKAGE_ROOT_DIR}"
    GEN_PACKAGE_DIR="${PACKAGE_DIR}"
  elif [[ -z "${GEN_PACKAGE_ROOT_DIR}" ]]; then
    GEN_PACKAGE_ROOT_DIR="${LOCAL_PACKAGE_ROOT_DIR}"
    GEN_PACKAGE_DIR="${LOCAL_PACKAGE_DIR}"
  else
    local distrib_id="${OS_DISTRIB_ID}"; to_lower distrib_id
    local distrib_release="${OS_DISTRIB_RELEASE}"
    GEN_PACKAGE_DIR="${GEN_PACKAGE_ROOT_DIR}/${distrib_id}/${distrib_release}"
  fi

  return $BASH_EX_OK
}

############################################################# MAIN EXECUTION ###

function _main() {
  local res=0

  script_vars
  handle_args "${SCRIPT_ARGS}"
  res=$?
  [[ $res -ne $BASH_EX_OK ]] && return $res

  local -a packages=( ${PACKAGES[@]} )
  array_unique packages

  for package in ${packages[@]}; do
    local config="${CONFIG}"
    local args=""
    local command_name=""
    local dependencies=""
    local package_name=""

    if [[ ${#PACKAGES[@]} -eq 1 ]]; then
      args="${ARGS}"
      command_name="${COMMAND_NAME}"
      dependencies="${DEPENDENCIES}"
      package_name="${PACKAGE_NAME:-${package}}"
    else
      package_name="${package}"
    fi

    [[ -z "${args}" ]]         && config="${config} -a ${args}"
    [[ -z "${command_name}" ]] && config="${config} -c ${command_name}"
    [[ -z "${dependencies}" ]] && config="${config} -d ${dependencies}"
    [[ -z "${package}" ]]      && config="${config} -p ${package}"
    [[ -z "${package_name}" ]] && config="${config} -n ${package_name}"

    if $INTERACTIVE; then
      local main="true"
      local pre=""
      local post=""

      warning "Generating ${package}"
      ! $SKIP_MAIN && prompt_boolean main "Generate main package (default=true)? "
      prompt_boolean pre "Generate pre package (default=false)? "
      prompt_boolean post "Generate post package (default=false)? "

      $main && i_generate_template_main -D "${GEN_PACKAGE_ROOT_DIR}" "${package}"
      $pre  && i_generate_template_pre  -D "${GEN_PACKAGE_ROOT_DIR}" "${package}"
      $post && i_generate_template_post -D "${GEN_PACKAGE_ROOT_DIR}" "${package}"
    else
      if [[ -z "${PACKAGE_MANAGER}" ]]; then
        local file_path="${GEN_PACKAGE_DIR}/${package_name}"
      else
        local file_path="${GEN_PACKAGE_DIR}/${package_name}.${PACKAGE_MANAGER}"
      fi

      if [[ ! -d "${GEN_PACKAGE_DIR}" ]]; then
        if execlog "mkdir -p '${GEN_PACKAGE_DIR}'"; then
          ok "'${GEN_PACKAGE_DIR}' directory created"
        else
          res=$?
          error "'${GEN_PACKAGE_DIR}' creation failed"
          return $BASH_SYS_EX_CANTCREAT
        fi
      fi

      local continue=""
      if $GENERATE_PRE || $GENERATE_POST; then
        if ! $SKIP_MAIN && confirm "Would you like to generate the main package template? (Y/y): "; then
          generate_template_main ${config} -- "${file_path}"
          res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
          open_editor_package -E ${SKIP_EDIT} -- "${file_path}"
          finish "Package generated in to '${file_path}'"
        fi
        if $GENERATE_PRE; then
          generate_template_pre ${config} -- "${file_path}.pre"
          res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
          open_editor_package -E ${SKIP_EDIT} -- "${file_path}.pre"
          finish "Package generated in to '${file_path}.pre'"
        fi
        if $GENERATE_POST; then
          generate_template_post ${config} -- "${file_path}.post"
          res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
          open_editor_package -E ${SKIP_EDIT} -- "${file_path}.post"
          finish "Package generated in to '${file_path}.post'"
        fi
      else
        generate_template_main ${config} -- "${file_path}"
        res=$?; [[ $res -ne $BASH_EX_OK ]] && return $res
        open_editor_package -E ${SKIP_EDIT} -- "${file_path}"
        finish "Package generated in to '${file_path}'"
      fi
    fi
  done

  return $res
}


res=0
_main
res=$?

unset SKIP_CONFIRM
unset VERBOSE
unset DEBUG
unset LOG_DEBUG_LEVEL
unset ENABLE_COLORS
unset ARGS
unset AUTHOR
unset COMMAND_NAME
unset DEPENDENCIES
unset PACKAGE
unset PACKAGE_MANAGER
unset PACKAGE_NAME
unset DESTINATION
unset GEN_PACKAGE_DIR
unset GENERATE_PRE
unset GENERATE_POST
unset SKIP_MAIN
unset SKIP_EDIT
unset AS_ROOT
unset ALLOW_DEP_FAIL
unset EXECUTE
unset FORCE
unset GLOBAL
unset UPDATE

exit $res
