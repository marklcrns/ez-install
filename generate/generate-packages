#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "${BASH_SOURCE%/*}/../install/common.sh"

SCRIPT_DIR="${BASH_SOURCE%/*}"

_main() {

  local -a _essentials=(
    "build-essential"
    "libffi-dev"
    "libssl-dev"
    "cmake"
    "curl"
    "wget"
    "zip"
    "unzip"
    "unar"
    "git"
    "-d git git-lfs"
    "gnupg2"
    "net-tools"
  )

  local -a _languages=(
    # Python
    "python"
    "python2"
    "python2-dev"
    "python3"
    "python3-dev"
    "python3-pip"
    "python3-venv"
    # Python packages
    "-m pip -d python wheel"
    "-m pip -d python pipenv"
    "-m pip -d python virtualenv"
    "-m pip -d python Send2Trash"
    "-m pip -d python trash-cli"
    "-m pip2 -d python2 wheel"
    "-m pip2 -d python2 pipenv"
    "-m pip2 -d python2 virtualenv"
    "-m pip2 -d python2 Send2Trash"
    "-m pip2 -d python2 trash-cli"
    "-m pip3 -d python3 wheel"
    "-m pip3 -d python3 pipenv"
    "-m pip3 -d python3 virtualenv"
    "-m pip3 -d python3 Send2Trash"
    "-m pip3 -d python3 trash-cli"
    # Java
    "default-jre"
    "default-jdk"
    "openjdk-8-jdk"
    "openjdk-8-jre"
    "openjdk-11-jdk"
    "openjdk-11-jre"
    "openjdk-13-jdk"
    "openjdk-13-jre"
    "maven"
    # R
    "r-base"
  )

  local -a _package_manager=(
    "-m npm -d nodejs browser-sync"
    "-m npm -d nodejs gulp-cli"
    "yarn"
    "-m curl -n nvm 'https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash'"
    "-m local -c node nodejs"
    "-m curl -n cargo 'https://sh.rustup.rs | sh'"
  )

  local -a _shell=(
    "zsh"
    "-m curl -d zsh -n oh-my-zsh 'https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh'"
    "-m git -d oh-my-zsh -n zsh-autosuggestions -o '\${ZSH_CUSTOM:-\${HOME}/.oh-my-zsh/custom}/plugins/zsh-autosuggestions' 'https://github.com/zsh-users/zsh-autosuggestions'"
    "-m git -d oh-my-zsh -n zsh-syntax-highlighting -o '\${ZSH_CUSTOM:-\${HOME}/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting' 'https://github.com/zsh-users/zsh-syntax-highlighting.git'"
    "-m git -d oh-my-zsh -n powerlevel10k -o '\${HOME}/.oh-my-zsh/themes/powerlevel10k' 'https://github.com/romkatv/powerlevel10k.git'"
  )

  local -a _session_manager=(
    "tmux"
    "tmuxinator"
    "gawk"
    "urlview"
    "-m pip -d python spotify-cli-linux"
    "-m pip2 -d python2 spotify-cli-linux"
    "-m pip3 -d python3 spotify-cli-linux"
    "-m git -d tmux -n tpm -o '\${HOME}/.tmux/plugins/tpm' 'https://github.com/tmux-plugins/tpm'"
  )

  local -a _file_manager=(
    "ranger"
    "-m git -n ranger_devicons -o '\${HOME}/.config/ranger/plugins/ranger_devicons' 'https://github.com/alexanderjeurissen/ranger_devicons'"
    "caca-utils"
    "highlight"
    "atool"
    "w3m"
    "w3m-img"
    "zathura"
    "xdotool"
    "poppler-utils"
    "mediainfo"
    "mupdf"
    "mupdf-tools"
  )

  local -a _text_editor=(
    "-m apt -c nvim -n neovim-unstable neovim"
    "-m npm -d 'nodejs neovim' neovim"
    "-m npm -d nodejs eslint"
    "-m npm -d nodejs stylelint"
    "-m npm -d nodejs prettier"
  )




  local -a _test=(
    "-m apt test1"
    "-m npm test1"
    "-m curl -n test1 test1"
    "-m git -n test1 test1"

    "-d test1 -m apt test1-1"
    "-d test1 -m npm test1-1"
    "-d test1 -m curl -n test1-1 test1-1"
    "-d test1 -m git -n test1-1 test1-1"

    "-d test1-1 -m apt test1-2"
    "-d test1-1 -m npm test1-2"
    "-d test1-1 -m curl -n test1-2 test1-2"
    "-d test1-1 -m git -n test1-2 test1-2"

    "-d test1-2 -m apt test1-3"
    "-d test1-2 -m npm test1-3"
    "-d test1-2 -m curl -n test1-3 test1-3"
    "-d test1-2 -m git -n test1-3 test1-3"

    "test2"
    "-d test2 test2-a"
    "-d test2-a test2-a-i"
    "-d test2-a-i test2-a-i-1"
    "-d test2-a-i-1 test2-a-i-1-a"

    "test3"
    "-d test3 test3-a"
    "-d test3-a test3-a-1"
    "-d test3-a test3-a-2"
    "-d 'test3-a-1 test3-a-2' test3-a-2-i"
    "-d test3-a-2-i test3-a-2-ii"
    "-d test3-a-2-ii test3-b"
    "-d test3-b test3-b-1"
    "-d test3-b test3-b-2"
    "-d test3-b test3-b-3"
    "-d 'test3-b-1 test3-b-2 test3-b-3' test3-b-3-i"
  )


  local -a packages=(
    "${_essentials[@]}"
    "${_languages[@]}"
    "${_package_manager[@]}"
    "${_shell[@]}"
    "${_test[@]}"
    "${_session_manager[@]}"
    "${_file_manager[@]}"
    "${_text_editor[@]}"
  )

  for package in "${packages[@]}"; do
    ${SCRIPT_DIR}/generate-template -y "${package}"
  done
}

_main
