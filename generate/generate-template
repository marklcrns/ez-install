#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "${BASH_SOURCE%/*}/../common/common.sh"
source "${BASH_SOURCE%/*}/common.sh"

SCRIPT_ARGS="${@}"

usage() {
  local scriptpath="$(realpath -- "${0}")"

cat <<- EOF
$(basename -- "${scriptpath}")

USAGE:

./$(basename -- "${scriptpath}") [ -hvxy ] package

OPTIONS:

  -d --dependency       package installation dependencies
  -a --author           package author (optional)
  -D --directory-path   package output directory
  -v --verbose          verbose output
  -x --debug            debug
  -y --skip             skip confirmation
  -h --help             show usage
EOF
}

handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "${arg}" in
      --dependency)     args="${args:-}-d ";;
      --author)         args="${args:-}-a ";;
      --directory-path) args="${args:-}-D ";;
      --skip-confirm)   args="${args:-}-y ";;
      --verbose)        args="${args:-}-v ";;
      --debug)          args="${args:-}-x ";;
      --help)           args="${args:-}-h ";;
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=false
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3

  FILE=""
  DEPENDENCIES=""
  AUTHOR=""
  DIRECTORY_PATH="${PACKAGE_DIR:-${BASH_SOURCE%/*}/packages}"

  OPTIND=1
  while getopts "a:d:D:vxyh" opt; do
    case ${opt} in
      a)
        AUTHOR="${OPTARG}"
        ;;
      d)
        DEPENDENCIES="${OPTARG}"
        ;;
      D)
        DIRECTORY_PATH="${OPTARG}"
        ;;
      v)
        VERBOSE=true
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      h)
        usage; exit 0
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -z "${1+x}" ]]; then
    error "No filename argument provided" 1
  fi
  FILE="${1}"

  return 0
}


_check_package() {
  local package="${1:-}"
  local prompt="${2:-Do you wish to continue? (Y/y): }"

  if [[ -z "${package}" ]]; then
    error "No package provided" 1
  fi

  if [[ -e "${package}" ]]; then
    confirm "'${package}' already exists. Do you wish to continue? (Y/y): "
  fi
}


generate_template() {
  local file_path="${1:-}"

  _check_package "${file_path}"

cat > "${file_path}" <<- ___EOF___
#!/usr/bin/env bash

########################################################### PACKAGE METADATA ###
# package: ${FILE}
# dependency: ${DEPENDENCIES}
# author: ${AUTHOR}
################################################################################


source "\${BASH_SOURCE%/*}/../common.sh"

# Set up if executed instead of sourcing
if [ "\${0##*/}" == "\${BASH_SOURCE[0]##*/}" ]; then
  source "\${BASH_SOURCE%/*}/../../common/common.sh"
  script_vars
  handle_args "\${@}"
fi

################################################################# START CODE ###

# TODO: Finish ${FILE} installation template

_main() {
  # Package name defaults to filename
  local package="\$(basename -- "\${BASH_SOURCE}")"

  # Get system package manager
  [[ -z "\${PACKAGE_MANAGER:-}" ]] && get_sys_package_manager PACKAGE_MANAGER

  # Install package
  install "\${PACKAGE_MANAGER}" "\${package}"
}

################################################################### END CODE ###

_main
unset PACKAGE_MANAGER
___EOF___

  chmod +x "${file_path}"
  echo -e "${file_path} created!"
}


_main() {
  handle_args "${SCRIPT_ARGS}"
  local file_path="${DIRECTORY_PATH}/${FILE}"
  generate_template "${file_path}"
}


_main

unset FILE
unset DEPENDENCIES
unset AUTHOR
unset DIRECTORY_PATH
