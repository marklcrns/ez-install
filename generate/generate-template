#!/usr/bin/env bash

set -o pipefail
set -o nounset

source "${BASH_SOURCE%/*}/../common/include.sh"

include "${BASH_SOURCE%/*}/../.ez-installrc"
include "${HOME}/.ez-installrc"
include "${BASH_SOURCE%/*}/../common/common.sh"
include "${BASH_SOURCE%/*}/../install/common.sh"

SCRIPT_ARGS="${@}"


usage() {
  local scriptpath="$(realpath -- "${0}")"

cat <<- EOF
$(basename -- "${scriptpath}")

USAGE:

./$(basename -- "${scriptpath}") [ -hvxy ] package

OPTIONS:

  -d --dependency       package installation dependencies
  -a --author           package author (optional)
  -D --directory-path   package output directory
  -p --package-manager  package manager installer
  -v --verbose          verbose output
  -x --debug            debug
  -y --skip             skip confirmation
  -h --help             show usage
EOF
}

handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "${arg}" in
      --dependency)       args="${args:-}-d ";;
      --author)           args="${args:-}-a ";;
      --directory-path)   args="${args:-}-D ";;
      --package-manager)  args="${args:-}-m ";;
      --package-name)     args="${args:-}-n ";;
      --skip-confirm)     args="${args:-}-y ";;
      --verbose)          args="${args:-}-v ";;
      --debug)            args="${args:-}-x ";;
      --help)             args="${args:-}-h ";;
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  [[ -z "${SKIP_CONFIRM+x}" ]]    && SKIP_CONFIRM=false
  [[ -z "${VERBOSE+x}" ]]         && VERBOSE=false
  [[ -z "${DEBUG+x}" ]]           && DEBUG=false
  [[ -z "${LOG_DEBUG_LEVEL+x}" ]] && LOG_DEBUG_LEVEL=3

  FILE=""
  DEPENDENCIES=""
  AUTHOR=""
  DIRECTORY_PATH="${PACKAGE_DIR:-${BASH_SOURCE%/*}/packages}"
  PACKAGE_MANAGER=""
  PACKAGE_NAME=""

  OPTIND=1
  while getopts "a:d:D:m:n:vxyh" opt; do
    case ${opt} in
      a)
        AUTHOR="${OPTARG}"
        ;;
      d)
        DEPENDENCIES="${OPTARG}"
        ;;
      D)
        DIRECTORY_PATH="${OPTARG}"
        ;;
      m)
        PACKAGE_MANAGER="$(echo "${OPTARG}" | awk '{print tolower($0)}')"
        ;;
      n)
        PACKAGE_NAME="${OPTARG}"
        ;;
      v)
        VERBOSE=true
        ;;
      x)
        DEBUG=true
        LOG_DEBUG_LEVEL=7
        ;;
      y)
        SKIP_CONFIRM=true
        ;;
      h)
        usage; exit 0
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -z "${@+x}" ]]; then
    error "No package argument provided" 1
  fi
  FILE="${@}"
  PACKAGE="${FILE}"

  if [[ ${PACKAGE_MANAGER} == "curl" ]] || [[ ${PACKAGE_MANAGER} == "wget" ]]; then
    if [[ -z "${PACKAGE_NAME}" ]]; then
      error "No package name provided for '${PACKAGE_MANAGER} ${PACKAGE}'" 1
    fi
    FILE="${PACKAGE_NAME}"
  fi

  return 0
}


_check_package() {
  local package="${1:-}"
  local prompt="${2:-Do you wish to continue? (Y/y): }"

  if [[ -z "${package}" ]]; then
    error "No package provided" 1
  fi

  if [[ -e "${package}" ]] && ! ${SKIP_CONFIRM}; then
    confirm "'${package}' already exists. ${prompt}" ||
      return 1
  fi
}


generate_template() {
  local file_path="${1:-}"

  _check_package "${file_path}" ||
    exit 1

cat > "${file_path}" <<- ___EOF___
#!/usr/bin/env bash

########################################################### PACKAGE METADATA ###
# ---
# package: ${FILE}
# dependency: ${DEPENDENCIES}
# author: ${AUTHOR}
# date: $(date "+%Y-%m-%d")
# ---
################################################################################

source "\${EZ_INSTALL_HOME}/install/init.sh"

############################################################## START INSTALL ###

# TODO: Finish ${FILE} installation template

_main() {
  # Package name defaults to filename
  local package="${PACKAGE}"
  local package_name="${PACKAGE_NAME}"
  local package_manager="${PACKAGE_MANAGER:-"\${PACKAGE_MANAGER:-}"}"

  # Get system package manager
  [[ -z "\${package_manager}" ]] && get_sys_package_manager package_manager

  # Install package
  install -n "\${package_name}" -- "\${package_manager}" "\${package}"

  local res=\$?
  return \${res}
}

################################################################ END INSTALL ###

_main
# SOURCED BY \`pac-install()\`, DO NOT USE \`exit\`. USE \`return\` INSTEAD
___EOF___

  chmod +x "${file_path}" && echo -e "${file_path} created!"
}


_main() {
  handle_args "${SCRIPT_ARGS}"
  if [[ -z "${PACKAGE_MANAGER}" ]]; then
    local file_path="${DIRECTORY_PATH}/${FILE}"
  else
    local file_path="${DIRECTORY_PATH}/${FILE}.${PACKAGE_MANAGER}"
  fi

  if [[ ! -d "${DIRECTORY_PATH}" ]]; then
    mkdir -p "${DIRECTORY_PATH}"
  fi
  generate_template "${file_path}"
}


_main

unset DEPENDENCIES
unset AUTHOR
unset DIRECTORY_PATH
unset FILE
unset PACKAGE
unset PACKAGE_MANAGER
unset PACKAGE_NAME
