#!/usr/bin/env bash

set -o pipefail
set -o nounset

############################################################### FLAG OPTIONS ###

usage() {
  cat << EOF
Install script template generator.

${SCRIPT_PATH} [ -yh ]

OPTIONS:

    -y  skip confirmation
    -h  help
EOF
}

function handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "${arg}" in
      --dependency)     args="${args:-}-d ";;
      --author)         args="${args:-}-a ";;
      --directory-path) args="${args:-}-D ";;
      --skip-confirm)   args="${args:-}-y ";;
      --verbose)        args="${args:-}-v ";;
      --very-verbose)   args="${args:-}-V ";;
      --debug)          args="${args:-}-x ";;
      --help)           args="${args:-}-h ";;
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  SKIP_CONFIRM=false
  VERBOSE=true
  VERY_VERBOSE=false
  DEBUG=false

  FILE=""
  DEPENDENCIES=""
  AUTHOR=""

  OPTIND=1
  while getopts "a:d:D:yvVxh" opt; do
    case ${opt} in
      a)
        readonly AUTHOR="${OPTARG}"
        ;;
      d)
        readonly DEPENDENCIES="${OPTARG}"
        ;;
      D)
        readonly DIRECTORY_PATH="${OPTARG}"
        ;;
      y)
        readonly SKIP_CONFIRM=true
        ;;
      v)
        readonly VERBOSE=true
        ;;
      V)
        readonly VERY_VERBOSE=true
        ;;
      x)
        readonly LOG_DEBUG_LEVEL=7
        ;;
      h)
        usage; exit 0
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  if [[ -n "${1:-}" ]]; then
    FILE="${1}"
  else
    echo "No filename argument provided"
    exit 1
  fi

  return 0
}

################################################## CONSTANT GLOBAL VARIABLES ###

SCRIPT_PATH="${BASH_SOURCE[0]}"
while [ -h "$SCRIPT_PATH" ]; do
  SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
  SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
  [[ $SCRIPT_PATH != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
SCRIPT_ARGS="$@"

readonly SCRIPT_PATH
readonly SCRIPT_DIR
readonly SCRIPT_ARGS

###################################################### EXTERNAL DEPENDENCIES ###

source "${SCRIPT_DIR}/../common/colors.sh"
source "${SCRIPT_DIR}/../common/log.sh"
source "${SCRIPT_DIR}/../install/install.sh"

############################################################## PRE-EXECUTION ###

############################################################# MAIN EXECUTION ###

generate_template() {
  local file_path="${1:-}"

  cat > "${file_path}" <<- ___EOF___
#!/usr/bin/env bash

########################################################### PACKAGE METADATA ###
# package: ${FILE}
# dependency: ${DEPENDENCIES}
# author: ${AUTHOR}
################################################################################


############################################################### FLAG OPTIONS ###

usage() {
  cat <<- EOF
\$(basename -- "\${BASH_SOURCE}") installer

USAGE:

  \${BASH_SOURCE} [ -yh ]

OPTIONS:

    -y  skip confirmation
    -h  help
EOF
}

function handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "\${arg}" in
      --verbose)        args="\${args:-}-v ";;
      --debug)          args="\${args:-}-x ";;
      --skip-confirm)   args="\${args:-}-y ";;
      --help)           args="\${args:-}-h ";;
      *)
        [[ "\${arg:0:1}" == "-" ]] || delim="\""
        args="\${args:-}\${delim}\${arg}\${delim} ";;
    esac
  done

  eval set -- \${args:-}

  VERBOSE=false
  SKIP_CONFIRM=false

  OPTIND=1
  while getopts "vxyh" opt; do
    case \${opt} in
      v)
        readonly VERBOSE=true
        ;;
      x)
        readonly LOG_DEBUG_LEVEL=7
        ;;
      y)
        readonly SKIP_CONFIRM=true
        ;;
      h)
        usage; exit 0
        ;;
    esac
  done
  shift "\$((OPTIND-1))"

  return 0
}

################################################## CONSTANT GLOBAL VARIABLES ###

if [ "\${0##*/}" == "\${BASH_SOURCE[0]##*/}" ]; then
  SCRIPT_NAME="\$(basename -- "\${0}")"
  SCRIPT_PATH="\${BASH_SOURCE[0]}"
  while [ -h "\$SCRIPT_PATH" ]; do
    SCRIPT_DIR="\$(cd -P "\$(dirname "\$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
    SCRIPT_PATH="\$(readlink "\$SCRIPT_PATH")"
    [[ \$SCRIPT_PATH != /* ]] && SCRIPT_PATH="\$SCRIPT_DIR/\$SCRIPT_PATH"
  done
  SCRIPT_DIR="\$(cd -P "\$(dirname "\$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
  SCRIPT_ARGS="\$@"

  readonly SCRIPT_PATH
  readonly SCRIPT_DIR
  readonly SCRIPT_ARGS

###################################################### EXTERNAL DEPENDENCIES ###

  source "\${SCRIPT_DIR}/../common/colors.sh"
  source "\${SCRIPT_DIR}/../common/log.sh"
  source "\${SCRIPT_DIR}/../install/install.sh"
fi

############################################################## PRE-EXECUTION ###

############################################################# MAIN EXECUTION ###

_install() {
  local package="\${1:-}"

  if [[ "\$(uname)" == "Darwin" ]]; then
    install 'brew' "\${package}"
  elif [[ "\$(expr substr \$(uname -s) 1 5)" == "Linux" ]]; then
    if [[ -x "\$(command -v apk)" ]]; then
      install 'apk' "\${package}"
    elif [[ -x "\$(command -v pkg)" ]]; then
      install 'pkg' "\${package}"
    elif [[ -x "\$(command -v packman)" ]]; then
      install 'packman' "\${package}"
    elif [[ -x "\$(command -v apt)" ]]; then
      install 'apt' "\${package}"
    elif [[ -x "\$(command -v dnf)" ]]; then
      install 'dnf' "\${package}"
    elif [[ -x "\$(command -v nix-env)" ]]; then
      install 'nix-env' "\${package}"
    elif [[ -x "\$(command -v zypper)" ]]; then
      install 'zypper' "\${package}"
    fi
  else
    error "No matching package manager to install '\${package}'"
  fi
}

_main() {
  local script_name="\$(basename -- "\${BASH_SOURCE}")"

  if [ "\${0##*/}" == "\${BASH_SOURCE[0]##*/}" ]; then
    handle_args "\${SCRIPT_ARGS}"
    # Confirmation
    if ! \${SKIP_CONFIRM}; then
      local prompt="\${COLOR_YELLOW}You are about to install '\${script_name}'. Do you wish to continue? (Y/y): \${COLOR_NC}"
      \${SCRIPT_DIR}/../common/confirm "\${prompt}"
      if [[ "\${?}" -eq 1 ]]; then
        error "\${SCRIPT_PATH}: Aborted." 1
      fi
    fi
  fi

  _install "\${script_name}"
}

_main
___EOF___
}

main() {
  handle_args "${SCRIPT_ARGS}"

  local file_path="${DIRECTORY_PATH:-${SCRIPT_DIR}}/${FILE}"

  # Confirmation
  if ! ${SKIP_CONFIRM}; then
    if [[ -e "${file_path}" ]]; then
      local prompt="${COLOR_YELLOW}'${file_path}' already exists. Do you wish to continue? (Y/y): ${COLOR_NC}"
      ${SCRIPT_DIR}/../common/confirm "${prompt}"
      [[ "${?}" -eq 1 ]] && error "${SCRIPT_PATH}: Aborted." 1
    fi
  fi

  generate_template "${file_path}"

  chmod +x "${file_path}"
  echo -e "${file_path} created!"
}

main
