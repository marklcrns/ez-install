#!/usr/bin/env bash

########################################################### PACKAGE METADATA ###
# package: zip
# dependency: 
# author: 
################################################################################


############################################################### FLAG OPTIONS ###

usage() {
  cat <<- EOF
$(basename -- "${BASH_SOURCE}") installer

USAGE:

  ${BASH_SOURCE} [ -yh ]

OPTIONS:

    -y  skip confirmation
    -h  help
EOF
}

function handle_args() {
  local arg=
  for arg; do
    local delim=""
    case "${arg}" in
      --verbose)        args="${args:-}-v ";;
      --debug)          args="${args:-}-x ";;
      --skip-confirm)   args="${args:-}-y ";;
      --help)           args="${args:-}-h ";;
      *)
        [[ "${arg:0:1}" == "-" ]] || delim="\""
        args="${args:-}${delim}${arg}${delim} ";;
    esac
  done

  eval set -- ${args:-}

  VERBOSE=false
  SKIP_CONFIRM=false

  OPTIND=1
  while getopts "vxyh" opt; do
    case ${opt} in
      v)
        readonly VERBOSE=true
        ;;
      x)
        readonly LOG_DEBUG_LEVEL=7
        ;;
      y)
        readonly SKIP_CONFIRM=true
        ;;
      h)
        usage; exit 0
        ;;
    esac
  done
  shift "$((OPTIND-1))"

  return 0
}

################################################## CONSTANT GLOBAL VARIABLES ###

if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
  SCRIPT_NAME="$(basename -- "${0}")"
  SCRIPT_PATH="${BASH_SOURCE[0]}"
  while [ -h "$SCRIPT_PATH" ]; do
    SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
    SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
    [[ $SCRIPT_PATH != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
  done
  SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
  SCRIPT_ARGS="$@"

  readonly SCRIPT_PATH
  readonly SCRIPT_DIR
  readonly SCRIPT_ARGS

###################################################### EXTERNAL DEPENDENCIES ###

  source "${SCRIPT_DIR}/../common/colors.sh"
  source "${SCRIPT_DIR}/../common/log.sh"
  source "${SCRIPT_DIR}/../install/install.sh"
fi

############################################################## PRE-EXECUTION ###

############################################################# MAIN EXECUTION ###

_install() {
  local package="${1:-}"

  if [[ "$(uname)" == "Darwin" ]]; then
    install 'brew' "${package}"
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    if [[ -x "$(command -v apk)" ]]; then
      install 'apk' "${package}"
    elif [[ -x "$(command -v pkg)" ]]; then
      install 'pkg' "${package}"
    elif [[ -x "$(command -v packman)" ]]; then
      install 'packman' "${package}"
    elif [[ -x "$(command -v apt)" ]]; then
      install 'apt' "${package}"
    elif [[ -x "$(command -v dnf)" ]]; then
      install 'dnf' "${package}"
    elif [[ -x "$(command -v nix-env)" ]]; then
      install 'nix-env' "${package}"
    elif [[ -x "$(command -v zypper)" ]]; then
      install 'zypper' "${package}"
    fi
  else
    error "No matching package manager to install '${package}'"
  fi
}

_main() {
  local script_name="$(basename -- "${BASH_SOURCE}")"

  if [ "${0##*/}" == "${BASH_SOURCE[0]##*/}" ]; then
    handle_args "${SCRIPT_ARGS}"
    # Confirmation
    if ! ${SKIP_CONFIRM}; then
      local prompt="${COLOR_YELLOW}You are about to install '${script_name}'. Do you wish to continue? (Y/y): ${COLOR_NC}"
      ${SCRIPT_DIR}/../common/confirm "${prompt}"
      if [[ "${?}" -eq 1 ]]; then
        error "${SCRIPT_PATH}: Aborted." 1
      fi
    fi
  fi

  _install "${script_name}"
}

_main
